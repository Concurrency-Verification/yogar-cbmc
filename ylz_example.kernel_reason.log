This product includes software developed by Daniel Kroening, Edmund Clarke, 
Computer Science Department, University of Oxford 
Computer Science Department, Carnegie Mellon University
CBMC version 4.9 64-bit linux
file ./ylz_example.c: Parsing
Converting
Type-checking ylz_example
Generating GOTO Program
Adding CPROVER library
Function Pointer Removal
Partial Inlining
Generic Property Instrumentation
Starting Bounded Model Checking
--unwind 2
Adding SC constraints
Shared c::__CPROVER_threads_exited: 4R/3W
Shared c::__CPROVER_next_thread_id: 3R/3W
Shared c::x: 2R/3W
Shared c::y: 2R/3W
Shared c::m: 1R/2W
Shared c::n: 1R/2W
reads num: 13
writes num: 16
200 steps
200 steps
248 steps
size of program expression: 248 steps
no slicing due to threads
Generated 1 VCC(s), 1 remaining after simplification
34 =======
num = 9
Passing problem to propositional reduction
Running propositional reduction
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1073 variables, 3462 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Runtime decision procedure: 0.001s
add rf time = 0s
clear time  = 0s
================= Refine 0 =================
1 trace: c::x#2->c::y#3->c::y#4->c::x#5->
reason: (c::y#1, c::y#3), (c::y#4, c::y#2), (c::x#1, c::x#4), (c::x#1, c::x#5), 
2 trace: c::y#2->c::x#2->c::y#3->c::y#4->
reason: (c::y#1, c::y#3), (c::y#4, c::y#2), 
3 trace: c::y#1->c::m#1->c::n#1->->c::y#2->c::x#2->c::y#3->c::y#4->
reason: (c::y#1, c::y#3), (c::y#4, c::y#2), 
4 trace: c::x#1->c::y#1->c::m#1->c::n#1->->c::y#2->c::x#2->
reason: (c::y#4, c::y#2), (c::y#1, c::y#3), (c::x#1, c::x#4), 
5 trace: c::y#1->c::m#1->c::n#1->->->c::x#4->c::y#4->
reason: (c::y#4, c::y#2), (c::y#1, c::y#3), 
cycle number = 5
0: (c::x#1, c::x#4)(c::x#1, c::x#5)(c::y#1, c::y#3)(c::y#4, c::y#2)
1: (c::y#1, c::y#3)(c::y#4, c::y#2)
2: (c::y#1, c::y#3)(c::y#4, c::y#2)
3: (c::x#1, c::x#4)(c::y#1, c::y#3)(c::y#4, c::y#2)
4: (c::y#1, c::y#3)(c::y#4, c::y#2)
0: (c::y#1, c::y#3)(c::y#4, c::y#2)
constraint.size = 1
Running propositional reduction
Solving with MiniSAT 2.2.0 with simplifier
1073 variables, 3463 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Runtime decision procedure: 0s
add rf time = 0s
clear time  = 0s
================= Refine 1 =================
1 trace: c::x#1->c::y#1->c::m#1->c::n#1->->c::y#2->c::x#2->
reason: (c::y#1, c::y#2), (c::y#1, c::y#3), (c::x#1, c::x#5), 
2 trace: c::x#1->c::y#1->c::m#1->c::n#1->->->c::x#4->c::x#2->
reason: (c::y#1, c::y#2), (c::x#1, c::x#4), (c::y#1, c::y#3), (c::x#1, c::x#5), 
cycle number = 2
0: (c::x#1, c::x#5)(c::y#1, c::y#2)(c::y#1, c::y#3)
1: (c::x#1, c::x#4)(c::x#1, c::x#5)(c::y#1, c::y#2)(c::y#1, c::y#3)
0: (c::x#1, c::x#5)(c::y#1, c::y#2)(c::y#1, c::y#3)
constraint.size = 1
Running propositional reduction
Solving with MiniSAT 2.2.0 with simplifier
1073 variables, 3464 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Runtime decision procedure: 0s
add rf time = 0s
clear time  = 0s
================= Refine 2 =================
1 trace: c::y#2->c::x#2->c::y#3->c::y#4->c::x#5->c::n#3->c::y#5->
reason: (c::y#1, c::y#3), (c::y#5, c::y#2), 
2 trace: c::y#1->c::m#1->c::n#1->->c::y#2->c::x#2->c::y#3->c::y#4->
reason: (c::y#1, c::y#3), (c::y#5, c::y#2), 
3 trace: c::x#1->c::y#1->c::m#1->c::n#1->->c::y#2->c::x#2->
reason: (c::y#1, c::y#3), (c::x#1, c::x#5), 
4 trace: c::y#1->c::m#1->c::n#1->->->c::x#4->c::y#4->
reason: (c::y#5, c::y#2), (c::y#1, c::y#3), 
cycle number = 4
0: (c::y#1, c::y#3)(c::y#5, c::y#2)
1: (c::y#1, c::y#3)(c::y#5, c::y#2)
2: (c::x#1, c::x#5)(c::y#1, c::y#3)
3: (c::y#1, c::y#3)(c::y#5, c::y#2)
0: (c::y#1, c::y#3)(c::y#5, c::y#2)
1: (c::x#1, c::x#5)(c::y#1, c::y#3)
constraint.size = 2
Running propositional reduction
Solving with MiniSAT 2.2.0 with simplifier
1073 variables, 3464 clauses
SAT checker inconsistent: negated claim is UNSATISFIABLE, i.e., holds
Runtime decision procedure: 0s
VERIFICATION SUCCESSFUL
########## build eog time: 0 s#######
########## compute constraint time: 0 s#######
########## SAT Solving time: 0.001 s#######
