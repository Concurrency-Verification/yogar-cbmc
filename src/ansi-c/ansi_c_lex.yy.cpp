#line 2 "ansi_c_lex.yy.cpp"

#line 4 "ansi_c_lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyansi_c_create_buffer
#define yy_delete_buffer yyansi_c_delete_buffer
#define yy_flex_debug yyansi_c_flex_debug
#define yy_init_buffer yyansi_c_init_buffer
#define yy_flush_buffer yyansi_c_flush_buffer
#define yy_load_buffer_state yyansi_c_load_buffer_state
#define yy_switch_to_buffer yyansi_c_switch_to_buffer
#define yyin yyansi_cin
#define yyleng yyansi_cleng
#define yylex yyansi_clex
#define yylineno yyansi_clineno
#define yyout yyansi_cout
#define yyrestart yyansi_crestart
#define yytext yyansi_ctext
#define yywrap yyansi_cwrap
#define yyalloc yyansi_calloc
#define yyrealloc yyansi_crealloc
#define yyfree yyansi_cfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyansi_crestart(yyansi_cin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyansi_cleng;

extern FILE *yyansi_cin, *yyansi_cout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yyansi_ctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyansi_crestart()), so that the user can continue scanning by
	 * just pointing yyansi_cin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yyansi_ctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyansi_cleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yyansi_cwrap()'s to do buffer switches
 * instead of setting up a fresh yyansi_cin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyansi_crestart (FILE *input_file  );
void yyansi_c_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yyansi_c_create_buffer (FILE *file,int size  );
void yyansi_c_delete_buffer (YY_BUFFER_STATE b  );
void yyansi_c_flush_buffer (YY_BUFFER_STATE b  );
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yyansi_cpop_buffer_state (void );

static void yyansi_censure_buffer_stack (void );
static void yyansi_c_load_buffer_state (void );
static void yyansi_c_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yyansi_c_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yyansi_c_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yyansi_c_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyansi_calloc (yy_size_t  );
void *yyansi_crealloc (void *,yy_size_t  );
void yyansi_cfree (void *  );

#define yy_new_buffer yyansi_c_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyansi_censure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyansi_cin = (FILE *) 0, *yyansi_cout = (FILE *) 0;

typedef int yy_state_type;

extern int yyansi_clineno;

int yyansi_clineno = 1;

extern char *yyansi_ctext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yyansi_ctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yyansi_ctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyansi_cleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 356
#define YY_END_OF_BUFFER 357
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3138] =
    {   0,
        0,    0,    0,    0,    5,    5,   15,   15,    0,    0,
       10,   10,  302,  302,  301,  301,    0,    0,    0,    0,
        0,    0,  321,  321,  335,  335,  344,  344,    0,    0,
      353,  353,  310,  310,    0,    0,  357,    1,  297,   27,
       26,   26,  297,  297,   35,  291,  297,  297,  297,  297,
      297,  297,  297,  297,  292,  292,  297,  296,  297,  297,
      297,  291,  297,  297,  297,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  295,  297,    5,    7,    6,
        6,   15,   14,   25,   20,   19,   19,   25,   22,   25,

       25,   25,   25,   10,   12,   11,   11,  302,  303,  301,
      301,  356,  300,  306,  305,  304,  309,  308,  307,  299,
      298,  323,  321,  322,  322,  323,  323,  339,  335,  336,
      336,  337,  338,  339,  337,  337,  337,  337,  337,  337,
      347,  344,  345,  345,  347,  347,  346,  347,  347,  340,
      341,  347,  347,  342,  347,  347,  347,  343,  343,  347,
      347,  347,  347,  347,  347,  347,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  347,  351,  348,  349,
      350,  355,  353,  354,  354,  352,  355,  318,  310,  311,

      311,  313,  318,  318,  318,  318,  312,   27,   35,  277,
      249,  251,    0,  247,   17,  255,  256,    0,  254,  253,
      245,   35,   35,   35,   35,   35,   35,   35,   35,  291,
      283,  278,  288,    0,    0,  281,  270,  284,  271,  285,
      269,  132,    0,  294,    2,   13,  282,  292,  294,  292,
        0,    0,    0,  294,  292,  292,  292,    0,  292,  292,
      292,  292,  292,  134,  272,  274,  276,  275,  273,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
        0,    0,  289,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,   45,  291,
      291,  291,  291,  291,  291,  291,   53,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  290,  279,    5,    3,    4,   15,   20,
       22,    0,   18,    0,   22,   22,   22,   22,   23,    0,
        0,   19,    0,   10,    8,    9,  302,  301,  301,  300,
      321,    0,    0,  319,    0,  322,  335,  337,  336,  337,
      337,  337,  337,  337,  337,  344,  247,  255,  256,  254,
      253,  245,  346,  343,    0,  343,  343,  343,    0,  343,

      343,  343,  343,  345,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,   45,
      346,  346,  346,  346,  346,  346,  346,   53,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  353,  354,  310,  311,    0,    0,    0,
       35,   35,   28,   28,   35,   35,   35,   35,   35,   35,
       35,   16,  133,  280,  293,    0,  294,  293,  294,    0,
      292,    0,  294,    0,    0,    0,  292,  292,    0,    0,

        0,  292,  286,    0,  250,  287,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  101,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,   51,  291,  291,  291,   55,  291,  291,  291,
      116,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  228,

      291,  291,  291,  291,  291,  291,  291,  291,  291,   22,
       22,   21,   21,   22,   22,   22,    0,   24,  320,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      343,    0,    0,    0,  343,  343,    0,    0,    0,  343,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  101,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,   51,  346,  346,  346,   55,

      346,  346,  346,  116,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  228,  346,  346,  346,  346,  346,  346,  346,
      346,  346,    0,    0,    0,   28,   35,   35,   35,   35,
       35,    0,  294,    0,  294,  292,  292,  292,    0,  292,
        0,  292,  292,  292,    0,  292,    0,  252,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,   36,  106,  291,   39,  291,
       40,  291,  291,  291,  291,  291,  291,  291,   47,   48,
      291,  291,  291,  291,   52,  291,   56,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  124,  291,  291,  291,  291,
      291,  291,  291,   69,  291,  291,  291,   21,   22,  337,
      337,  337,  337,  337,  337,  337,  332,  337,  337,  337,

      343,  343,  343,    0,  343,  343,  343,  343,    0,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,   36,  106,  346,   39,  346,   40,
      346,  346,  346,  346,  346,  346,  346,   47,   48,  346,
      346,  346,  346,   52,  346,   56,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  124,  346,  346,  346,  346,  346,
      346,  346,   69,  346,  346,  346,    0,  317,    0,   35,
       35,   35,   35,   35,    0,    0,    0,  292,    0,    0,
        0,    0,    0,  292,    0,  294,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  174,    0,    0,    0,  257,
      291,  291,   37,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  100,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  209,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  207,  291,
      291,  215,  291,  291,  227,  291,  291,  291,  291,  291,
      291,  198,  291,  291,  291,  291,  291,  291,  291,  291,
      291,   38,  107,  108,   42,  291,  291,  291,  291,  291,
      291,  291,   50,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,   60,  291,  291,  291,
      291,  291,  291,  291,  126,  291,  291,  291,  291,   67,
      291,  129,  291,  291,  291,   71,   22,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,    0,    0,    0,
      343,    0,    0,    0,  343,  346,  346,   37,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  100,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  209,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  207,  346,  346,  215,  346,  346,  227,
      346,  346,  346,  346,  346,  346,  198,  346,  346,  346,
      346,  346,  346,  346,  346,  346,   38,  107,  108,   42,
      346,  346,  346,  346,  346,  346,  346,   50,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,   60,  346,  346,  346,  346,  346,  346,  346,  126,

      346,  346,  346,  346,   67,  346,  129,  346,  346,  346,
       71,    0,    0,   35,   32,   35,   35,   34,    0,    0,
        0,  294,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  258,    0,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,   89,
      291,  291,  291,  291,   78,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  205,   87,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  212,
      291,  188,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  110,   46,  291,   49,  113,   54,  291,  291,  291,
      291,  291,  291,  291,  121,  291,  291,   59,   61,   62,
       63,   64,   65,  291,  291,  291,  127,  291,  219,  291,
      291,  291,  291,   22,  337,  337,  337,  337,  337,  337,
      337,  326,  337,  337,    0,    0,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,   89,

      346,  346,  346,  346,   78,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  205,   87,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  212,
      346,  188,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  110,   46,  346,   49,  113,   54,  346,  346,  346,
      346,  346,  346,  346,  121,  346,  346,   59,   61,   62,
       63,   64,   65,  346,  346,  346,  127,  346,  219,  346,
      346,  346,  346,    0,    0,   33,   32,   32,   31,   34,
       34,    0,  294,    0,    0,  170,    0,    0,  177,  176,

        0,    0,    0,  248,  246,  291,  291,  263,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  206,  102,
      291,  291,  103,  291,  189,  291,  291,  199,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,   79,
       80,   81,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  231,  291,  291,
      291,   82,   83,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  223,  291,  291,  291,  291,  291,   44,  291,  114,

      291,  117,  291,  291,  119,  291,  291,  291,  291,  291,
      291,   66,  291,  291,  130,  291,  131,  337,  337,  337,
      337,  337,  337,  324,  337,  337,  346,  346,  263,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  206,
      102,  346,  346,  103,  346,  189,  346,  346,  199,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
       79,   80,   81,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  231,  346,
      346,  346,   82,   83,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  223,  346,  346,  346,  346,  346,   44,  346,
      114,  346,  117,  346,  346,  119,  346,  346,  346,  346,
      346,  346,   66,  346,  346,  130,  346,  131,    0,    0,
       33,   33,   31,   31,   31,    0,  171,    0,  175,    0,
        0,    0,  260,  261,    0,  262,   41,  291,  264,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  230,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,   88,  224,   74,  291,  291,  291,  291,

      291,  291,  291,  291,  156,  291,  291,  291,  291,  291,
      291,  291,  291,  210,  180,   86,  291,  201,  218,  291,
      291,  291,  259,  220,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  191,  291,  291,   43,  111,  112,  291,
       94,  118,  291,   57,   58,  291,  123,  291,  128,   68,
       70,  337,  337,  333,  337,  337,  337,  337,  337,  260,
      261,   41,  346,  264,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  230,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,   88,  224,

       74,  346,  346,  346,  346,  346,  346,  346,  346,  156,
      346,  346,  346,  346,  346,  346,  346,  346,  210,  180,
       86,  346,  201,  218,  346,  346,  346,  259,  220,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  191,  346,
      346,   43,  111,  112,  346,   94,  118,  346,   57,   58,
      346,  123,  346,  128,   68,   70,    0,  314,   31,    0,
        0,    0,    0,    0,  291,  291,  291,  291,  266,  291,
      291,  291,  291,  291,  183,   97,  291,  291,  291,  190,
      196,   85,  200,  291,  291,  291,  291,  229,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  154,  291,  291,
      291,  291,  291,  291,  291,  226,  291,  291,  291,  192,
      291,  291,  291,  291,  291,  291,  291,  291,  105,  291,
      179,  193,  291,  109,  115,  120,  291,  291,  337,  337,
      337,  337,  337,  337,  337,  346,  346,  346,  346,  266,
      346,  346,  346,  346,  346,  183,   97,  346,  346,  346,
      190,  196,   85,  200,  346,  346,  346,  346,  229,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  154,  346,
      346,  346,  346,  346,  346,  346,  226,  346,  346,  346,

      192,  346,  346,  346,  346,  346,  346,  346,  346,  105,
      346,  179,  193,  346,  109,  115,  120,  346,  346,    0,
       31,    0,    0,    0,    0,    0,  291,   75,   76,  265,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  178,  135,  291,  194,   73,  291,  291,  291,  137,
      291,  291,  291,  291,  291,  291,  291,  225,  291,  291,
      150,  291,  291,  153,  291,  291,  291,  291,  291,  291,
      162,  291,  291,  186,  202,  291,  195,  221,  291,  291,
      291,  291,  203,  291,  291,  291,  291,  337,  337,  327,
      337,  337,  337,  337,  346,   75,   76,  265,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  178,
      135,  346,  194,   73,  346,  346,  346,  137,  346,  346,
      346,  346,  346,  346,  346,  225,  346,  346,  150,  346,
      346,  153,  346,  346,  346,  346,  346,  346,  162,  346,
      346,  186,  202,  346,  195,  221,  346,  346,  346,  346,
      203,  346,  346,  346,  346,  315,   31,    0,  173,  167,
        0,    0,   77,  291,  291,   98,  291,  291,  291,  291,
      291,  291,  208,  184,   96,  182,   72,  291,  291,  291,
      291,   84,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  164,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  160,  291,  291,  291,  291,  291,  104,  291,  291,
      291,  291,  213,  291,  291,  291,  325,  337,  337,  337,
      337,  330,   77,  346,  346,   98,  346,  346,  346,  346,
      346,  346,  208,  184,   96,  182,   72,  346,  346,  346,
      346,   84,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  164,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  160,  346,  346,  346,  346,  346,  104,  346,  346,
      346,  346,  213,  346,  346,  346,    0,   31,   31,    0,
      169,    0,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  214,  136,  291,  291,  291,  291,  291,  291,
      291,  149,  291,  291,  291,  291,  291,  291,  291,  291,
       93,  187,  291,  291,  291,  197,  204,  291,  291,  125,
      337,  337,  337,  337,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  214,  136,  346,  346,  346,  346,
      346,  346,  346,  149,  346,  346,  346,  346,  346,  346,
      346,  346,   93,  187,  346,  346,  346,  197,  204,  346,
      346,  125,  316,   31,   31,   31,   31,    0,    0,  291,
      268,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  243,  181,  291,  291,  291,  291,  185,  222,
      291,  291,  291,  291,  291,  291,  148,  291,  152,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  122,
      337,  337,  337,  337,  346,  268,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  243,  181,  346,
      346,  346,  346,  185,  222,  346,  346,  346,  346,  346,
      346,  148,  346,  152,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  122,   31,   30,   30,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
        0,    0,  267,  291,  291,  291,  240,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  158,  159,
      291,  291,  216,  291,  291,  291,  334,  337,  337,  337,
      267,  346,  346,  346,  240,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  158,  159,  346,  346,
      216,  346,  346,  346,   31,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,    0,    0,
      291,  291,  291,  242,  291,  291,  291,  291,  291,  291,
      241,  291,  291,  291,  291,  138,  291,  291,  291,  291,

      291,  291,  291,  165,  291,  291,  291,  291,  291,  291,
      291,  211,   90,  337,  331,  337,  346,  346,  346,  242,
      346,  346,  346,  346,  346,  346,  241,  346,  346,  346,
      346,  138,  346,  346,  346,  346,  346,  346,  346,  165,
      346,  346,  346,  346,  346,  346,  346,  211,   90,   31,
       31,   31,   31,   31,   31,   31,   31,   31,  172,    0,
      291,  232,  291,  234,  291,  291,  291,  233,  291,  291,
      291,  291,   91,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  157,  291,  163,  291,  291,  337,  337,  346,
      232,  346,  234,  346,  346,  346,  233,  346,  346,  346,

      346,   91,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  157,  346,  163,  346,  346,   31,   31,   31,   31,
       31,   31,   31,   31,    0,  291,  291,  244,  239,  238,
      291,   99,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  217,  166,  337,  328,
      346,  346,  244,  239,  238,  346,   99,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  217,  166,   31,   31,    0,  235,  291,  291,   92,
      291,  291,  291,  141,  291,  291,  144,  291,  291,  291,
      291,  291,  291,  337,  235,  346,  346,   92,  346,  346,

      346,  141,  346,  346,  144,  346,  346,  346,  346,  346,
      346,    0,  237,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  151,  291,  291,  337,  237,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  151,  346,  346,    0,
      291,  291,  139,  291,  142,  291,  291,  291,  291,  155,
      291,  337,  346,  346,  139,  346,  142,  346,  346,  346,
      346,  155,  346,    0,  291,  291,  291,  291,  291,  146,
      291,  291,  329,  346,  346,  346,  346,  346,  146,  346,
      346,    0,  236,  291,  291,  291,  291,  291,  291,  236,
      346,  346,  346,  346,  346,  346,    0,  291,  291,  291,

      291,  291,  161,  346,  346,  346,  346,  346,  161,    0,
      291,  291,  291,  145,  147,  346,  346,  346,  145,  147,
        0,  291,  140,  143,  346,  140,  143,    0,  291,  346,
        0,  291,  346,  168,   95,   95,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        5,    5,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,    1,    1,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   43,   46,   43,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   50,   56,   43,   43,
       57,   58,   59,   60,   61,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,   91,
        1,   92,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[94] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    1,    3,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    6,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    8,    8,    8,    8,    7,
        7,    3,    3,    9,    9,    9,    3,    3,   10,    3,
        3,    3,    3,    9,    3,    3,    1,    1,    1,   11,
        3,    8,    8,    8,    8,    7,    7,    3,    3,    9,
        9,    3,    9,    3,    3,    3,   10,    3,    3,    3,
        3,    9,    3,    3,    3,    3,    3,   11,    1,   12,
        1,    1,    1

    } ;

static yyconst flex_uint16_t yy_base[3191] =
    {   0,
        0,    0,    0,    0,   90,   91, 5065, 5064,   93,  111,
      105,  108, 4977, 4976,   99,  104,  113,  120,  128,  131,
       95,  117,  133,  145,  203,    0,  296,    0,  139,  157,
      387,  390,  393,  404,    0,    0, 5065, 5070, 5070,  152,
     5070, 5070,   88,  398,  490,    0, 5030,  129, 5005, 5028,
      150,  163,  397,  152,  561,  635, 5030, 5070,   96, 5026,
      143,  161,  400,  428, 5025,  682,  103,  120,  366,  124,
      356,  357, 4982,  371, 4981, 4974,  378,  370,  320, 4989,
      389,  417,  477,  112,  386, 5070,  379,    0, 5070, 5034,
     5038,    0, 5070, 5070,  482, 5070, 5070,  442,  501,  482,

     5045, 5047,  446,    0, 5070, 5030, 5034,    0, 5070,    0,
      411, 5070, 5070, 5070, 5070, 5070, 5070, 5070, 5070, 5070,
     5070, 5070, 5045, 5070, 5070,  534, 5043, 5070, 5043, 5070,
     5070,    0, 5070, 5041, 4983, 4970, 4966, 4979, 4961, 4973,
     5070, 5035, 5070, 5070,  443,  530,    0, 5003,  423, 5070,
     5070, 5002,  517, 5070,  527,  452, 5001,  754,  828, 5003,
      168, 4999,  473,  556,  537, 4998,  875,  464,  422,  502,
      412,  481,  521, 4955,  473, 4954, 4947,  487,  491,  497,
     4962,  556,  604,  430,  523,  501,  577, 5070, 5070, 5070,
     5070, 5070, 5024, 5070, 5070, 5070, 5022, 5070, 5022, 5070,

     5070, 5070, 5020, 4962, 4946, 4945, 5070,  606,  956, 5070,
     5070, 5070,  609,  613, 5070,  614,  626,    0,  634,  635,
      637,    0, 1036, 1116, 4954, 4954, 4948, 4938, 4941,    0,
     5070, 5070, 5070,  627, 5003, 5070, 5070, 5070, 5070, 5070,
     4999, 5070, 4994, 1154, 5070, 5070, 5070, 1227,  838, 1298,
      672,  591,  863, 5070,  687,  741,  748,    0, 1369, 1440,
      919,  761,  862, 5070, 4978, 4977, 4975, 5070, 4975,  638,
     4950,  671, 4971,  603, 4930, 4939, 4928, 4921, 5070, 4917,
      474, 4922, 5070,  605, 4924, 4923, 4932, 4931, 4922, 4919,
     4913, 4924, 1487, 4927, 4925, 4928, 4914, 4907, 4925, 4912,

     4904, 4908, 4917,  568, 4920, 4919, 4905,  630, 4897, 4898,
     4895,  500, 4900, 4896, 4904, 4892,    0,  626, 4897, 4890,
     4896, 4885, 4895, 4900, 4900,  628, 4902,  647, 4888,  542,
      589, 4893, 4888,  684, 4875, 4883, 4952,  630, 4888, 4878,
      580, 4887, 4885, 5070, 5070,    0, 5070, 5070,    0,  679,
     1019,  715, 5070,    0,    0, 1049, 1569, 4884, 5070, 4949,
      764, 5070, 4945,    0, 5070, 5070,    0,    0,  652, 5070,
     4948,  761, 4937, 5070, 4945, 5070, 4945,    0, 5070,  925,
     4877, 4881, 4881, 4882, 4879, 4939, 5070, 5070, 5070, 5070,
     5070, 5070,    0, 1616,  734, 1081,  880, 1041,    0, 1687,

     1163, 1212, 1232, 5070,  663, 4865, 4864, 4873, 4872, 4863,
     4860, 4854, 4865, 1734, 4868, 4866, 4869, 4855, 4848, 4866,
     4853, 4845, 4849, 4858,  687, 4861, 4860, 4846,  762, 4838,
     4839, 4836,  707, 4841, 4837, 4845, 4833,    0,  716, 4838,
     4831, 4837, 4826, 4836, 4841, 4841,  672, 4843,  765, 4829,
      722,  590, 4834, 4829,  691, 4816, 4824,  733, 4830, 4820,
      731, 4829, 4827, 4893, 5070, 4892, 5070, 4811, 4812, 4819,
      837,  872, 5070,  865, 1816,  898, 4824, 4824, 4814, 4826,
     4822, 5070, 5070, 5070,  930,  989, 1088, 5070, 1854, 1332,
     1356, 1143, 1918,  793, 4863, 4860, 5070, 1601,  821, 4861,

     4858, 5070, 5070, 4847, 5070, 5070, 4820, 4810, 4802, 4813,
      819, 4795, 4806, 4805, 4801, 4794, 4790, 4801, 4794, 4793,
     4794, 4803, 4791, 4803, 4785, 4801, 4783, 4815, 4811, 4812,
      950,  847,  884, 4792, 4772, 1018, 4783, 4793, 1122,  904,
     4787,  972, 4787, 1161,  852, 4777, 1031,  888, 4785, 4786,
     4769, 4775, 4782, 4767,    0, 4769, 4771, 4781, 4776, 4777,
     4761, 4759,  757, 4765, 4775, 4770, 4772, 4768, 4759, 4759,
     4765, 4768,    0, 4763, 4752, 4757,    0, 4758, 4763, 4758,
        0, 4750, 4742, 4742, 4737, 4738, 4745, 4747, 4735, 4733,
     4735, 4738, 4746, 4730, 4728, 4728, 4731, 4727,  871,    0,

     4740, 4729, 4734, 4728, 4721, 4736, 4738, 4737, 4725,  970,
     1032, 5070, 1078, 2000, 1095, 4722, 4792, 5070, 5070, 4722,
     4719, 4717, 4730, 4712, 4724, 4721, 4722, 4715, 4711, 4704,
     1362,  945, 4761, 4758, 5070, 1376,  971, 4759, 4756, 5070,
     4710, 4703, 4702, 4703, 4712, 4700, 4712, 4694, 4710, 4692,
     4724, 4720, 4721, 1130,  938, 1084, 4701, 4681, 1153, 4692,
     4702, 1195, 1036, 4696, 1225, 4696, 1367, 1161, 4686, 1152,
     1252, 4694, 4695, 4678, 4684, 4691, 4676,    0, 4678, 4680,
     4690, 4685, 4686, 4670, 4668,  944, 4674, 4684, 4679, 4681,
     4677, 4668, 4668, 4674, 4677,    0, 4672, 4661, 4666,    0,

     4667, 4672, 4667,    0, 4659, 4651, 4651, 4646, 4647, 4654,
     4656, 4644, 4642, 4644, 4647, 4655, 4639, 4637, 4637, 4640,
     4636, 1140,    0, 4649, 4638, 4643, 4637, 4630, 4645, 4647,
     4646, 4634, 4630, 4629, 4642, 5070, 4633, 4627, 4635, 4632,
     4633, 1474, 1511, 1554, 1579, 1927, 1621, 1674, 4669, 1680,
      366, 1815, 1989, 1694, 1759, 1993, 4668, 5070, 1239, 4615,
     4619, 4612, 4627, 4610, 4612, 4625, 4609, 4608, 4625, 4620,
     4617, 4610, 4610, 4605, 4611, 4614, 4611, 4612, 4596, 4610,
     4631, 4623, 4620, 4602, 4597, 4589, 4588, 4588, 4597, 4600,
     4586,  981, 4600,  816, 4583, 4587, 4585, 4581, 4583, 4578,

     4596, 4594,  915, 4577, 4593, 4590, 4590, 4584, 4586, 4587,
     4569, 4568,  929, 4578, 4581, 4577, 4578, 4578, 1045, 4555,
     4563, 1019, 4566, 4574, 4564, 4611, 4566, 4572, 4563, 4568,
     4558, 4549, 4559, 4564, 4566,    0,    0, 4554,    0, 4556,
        0, 4544, 4542, 4552, 4540, 4538, 4538, 4545,    0,    0,
     4547, 4527, 4513, 4507,    0, 4495,    0, 4504, 4481, 4483,
     4489, 4492, 4485, 4469, 4445, 4434, 4434, 4428, 4425, 4439,
     4419, 4405, 4408, 4372, 4351,    0, 4350, 4319, 1265, 4325,
     4310, 4309, 4294,    0, 4289, 4290, 4302, 5070, 4292, 4268,
     4253, 4258, 4247, 4237, 4226, 4212,    0, 4211, 4195, 4193,

     2024, 2011, 2042, 4239, 2046, 2081, 2076, 2094, 4238, 4187,
     4169,   31,   85,  125,  403,  453,  553,  644,  664,  715,
      721,  730,  726,  754,  766,  790,  803,  824,  839,  839,
      993,  856, 1066,  881,  929,  951,  971,  993, 1009, 1035,
     1042, 1075, 1038, 1056, 1065, 1069, 1083, 1098, 1124, 1109,
     1112, 1179, 1137, 1149, 1155, 1178, 1182, 1214, 1174, 1184,
     1202, 1190, 1201, 1195, 1264, 1221, 1230, 1225, 1232, 1226,
     1220, 1238, 1247, 1251,    0,    0, 1241,    0, 1246,    0,
     1249, 1251, 1263, 1253, 1254, 1256, 1272,    0,    0, 1276,
     1268, 1268, 1276,    0, 1288,    0, 1303, 1287, 1293, 1306,

     1311, 1312, 1309, 1306, 1299, 1303, 1306, 1305, 1321, 1312,
     1319, 1339, 1340, 1332,    0, 1347, 1327, 1407, 1337, 1349,
     1350, 1337,    0, 1343, 1346, 1362, 1358, 5070, 1353, 1361,
     1364, 1828, 1379, 1387, 1433, 1432, 1432, 5070, 1438, 1887,
     1448, 1450, 1449, 5070, 2156, 2166, 1400, 1412, 1396, 1409,
     1410, 1417, 1430, 1414, 1441, 5070, 1427, 1443, 1439, 5070,
     1439, 1446,    0, 1444, 1444, 1440, 1450, 1440, 1454, 1464,
     1485, 1480, 1493, 1462, 1481, 1464, 1468, 1479, 1473, 1483,
     1484, 1481, 1479, 1488, 1496, 1499, 1504, 1524, 1525, 1524,
     1526, 1549, 1546, 1543, 1544, 1595,    0, 2135, 1549, 1533,

     1538, 1551, 1557, 1602, 1564, 1558, 1551, 1558,    0, 1553,
     1571, 1575, 1568, 1583,    0, 1585, 1579, 1587, 1572, 1575,
     1595,    0, 1596, 1587, 1582, 1591, 1588, 1605, 1598, 1614,
     1615,    0,    0,    0, 1613, 1605, 1595, 1609, 1618, 1619,
     1624, 1615,    0, 1628, 1629, 1623, 1620, 1619, 1620, 1621,
     1623, 1641, 1642, 1626, 1651, 1647,    0, 1658, 1660, 1665,
     1649, 1666, 1674, 1672,    0, 1676, 1678, 1684, 1682,    0,
     1677,    0, 1692, 1685, 1698,    0, 2199, 1693, 1702, 1700,
     1696, 1696, 1692, 1708, 1714, 1713, 1712, 1782, 1769, 1768,
     5070, 1785, 1771, 1770, 5070, 1731, 1752,    0, 1750, 1750,

     1746, 1756, 1747, 1759, 1768, 1790, 1785, 1799, 1768, 1786,
     1769, 1786, 1797, 1792, 1802, 1803, 1791, 1790, 1798, 1806,
     1807, 1806, 1827, 1828, 1827, 1833, 1841, 1856, 1838, 1837,
     1906,    0, 2168, 1852, 1840, 1846, 1857, 1866, 1926, 1870,
     1864, 1871, 1880,    0, 1877, 1896, 1900, 1885, 1900,    0,
     1901, 1896, 1904, 1892, 1894, 1914,    0, 1915, 1906, 1898,
     1907, 1902, 1920, 1911, 1925, 1928,    0,    0,    0, 1926,
     1918, 1908, 1922, 1933, 1935, 1942, 1932,    0, 1943, 1944,
     1939, 1937, 1934, 1936, 1938, 1939, 1967, 1968, 1955, 1970,
     1966,    0, 1977, 1977, 1981, 1968, 1981, 1990, 1989,    0,

     1995, 2002, 2010, 2006,    0, 1999,    0, 2014, 2007, 2018,
        0, 2018, 2013, 2019, 2086, 2232, 2036, 2096, 2072, 2252,
     2262, 2272, 2073, 2025, 2027, 2043, 2047, 2049, 2037, 2057,
     2048, 2056, 2066, 2053, 5070, 2061, 2074, 2073, 2075, 2080,
     2073, 2069, 2063, 2089, 2090, 2109, 2102, 2120, 2085, 2100,
     2092, 2105, 2103, 2088, 2097, 2109, 2099, 2092, 2094, 2126,
     2129, 2142, 2134, 2127, 2143, 2148, 2241, 2126, 2137, 2155,
     2144, 2213, 2214, 2214,    0, 2178, 2180, 2170, 2178, 2189,
     2174, 2176, 2199, 2201, 2191, 2207, 2231, 2240, 2241, 2243,
     2236, 2288, 2287,    0, 2252, 2235, 2249, 2250, 2256, 2249,

     2256, 2259, 2249, 2256, 2248, 2262, 2253, 2249, 2252,    0,
     2266,    0, 2256, 2272, 2269, 2263, 2258, 2253, 2257, 2263,
     2260,    0,    0, 2272,    0,    0,    0, 2277, 2282, 2266,
     2270, 2271, 2282, 2268,    0, 2284, 2287,    0,    0,    0,
     2291,    0,    0, 2272, 2293, 2288,    0, 2282,    0, 2291,
     2285, 2286, 2279, 2358, 2287, 2293, 2303, 2299, 2286, 2291,
     2303,    0, 2307, 2309, 2342, 2343, 2313, 2309, 2308, 2314,
     2307, 2303, 2308, 2327, 2327, 2346, 2339, 2356, 2321, 2336,
     2328, 2338, 2335, 2320, 2329, 2341, 2331, 2324, 2326, 2331,
     2334, 2346, 2338, 2331, 2347, 2352, 2353, 2331, 2342, 2358,

     2346, 2399, 2400, 2399,    0, 2362, 2365, 2356, 2364, 2363,
     2356, 2357, 2373, 2374, 2366, 2380, 2370, 2379, 2380, 2381,
     2374, 2426, 2425,    0, 2390, 2373, 2387, 2387, 2393, 2386,
     2393, 2396, 2383, 2390, 2382, 2396, 2387, 2383, 2386,    0,
     2400,    0, 2390, 2406, 2403, 2397, 2392, 2387, 2391, 2397,
     2394,    0,    0, 2406,    0,    0,    0, 2411, 2416, 2400,
     2404, 2405, 2416, 2402,    0, 2418, 2421,    0,    0,    0,
     2425,    0,    0, 2406, 2427, 2422,    0, 2416,    0, 2425,
     2419, 2420, 2413, 2414, 2423, 2494,    0, 2495, 2496,    0,
     2497, 2480, 2490, 2447, 2441, 5070, 2459, 2451, 5070, 5070,

     2463, 2443, 2466, 5070, 5070, 2448, 2462, 2527, 2446, 2459,
     2469, 2472, 2456, 2475, 2476, 2490, 2499, 2502, 2476,    0,
     2480, 2463,    0, 2475, 2485, 2474, 2482, 2488, 2473, 2465,
     2472, 2474, 2493, 2483, 2535, 2488, 2486, 2480, 2485, 2492,
     2487, 2485, 2485, 2496, 2497, 2487, 2508, 2504, 2542,    0,
        0,    0, 2492, 2494, 2513, 2501, 2504, 2501, 2497, 2499,
     2516, 2515, 2521, 2510, 2515, 2513, 2526,    0, 2507, 2525,
     2529,    0,    0, 2531, 2523, 2529, 2518, 2523, 2522, 2536,
     2534, 2533, 2533, 2529, 2542, 2525, 2535, 2545, 2531, 2542,
     2536,    0, 2537, 2543, 2535, 2547, 2548,    0, 2534,    0,

     2552,    0, 2550, 2539,    0, 2553, 2541, 2540, 2560, 2557,
     2551,    0, 2559, 2561,    0, 2561,    0, 2562, 2554, 2569,
     2566, 2555, 2554,    0, 2555, 2555, 2556, 2570, 2635, 2554,
     2567, 2577, 2580, 2564, 2583, 2584, 2598, 2607, 2610, 2584,
        0, 2588, 2571,    0, 2583, 2593, 2582, 2590, 2596, 2581,
     2573, 2580, 2582, 2601, 2591, 2643, 2596, 2594, 2588, 2593,
     2600, 2595, 2593, 2593, 2604, 2605, 2595, 2616, 2612, 2650,
        0,    0,    0, 2600, 2601, 2620, 2608, 2611, 2608, 2604,
     2606, 2623, 2622, 2628, 2617, 2622, 2620, 2633,    0, 2614,
     2632, 2636,    0,    0, 2638, 2630, 2636, 2625, 2630, 2629,

     2643, 2641, 2640, 2640, 2636, 2649, 2632, 2642, 2652, 2638,
     2649, 2643,    0, 2644, 2650, 2642, 2654, 2655,    0, 2641,
        0, 2659,    0, 2657, 2646,    0, 2660, 2648, 2647, 2667,
     2664, 2658,    0, 2666, 2668,    0, 2668,    0, 2665, 2670,
        0, 2734,    0, 2735, 2677, 2678, 5070, 2675, 5070, 2679,
     2681, 2682,    0,    0, 2742, 5070,    0, 2724,    0, 2668,
     2674, 2688, 2679, 2712, 2703, 2705, 2692, 2691, 2677, 2674,
     2686, 2701, 2690, 2679, 2704, 2700, 2690,    0, 2698, 2696,
     2684, 2748, 2697, 2712, 2694, 2698, 2701, 2696, 2708, 2713,
     2701, 2701, 2721,    0, 2722,    0, 2703, 2719, 2706, 2704,

     2722, 2708, 2716, 2725,    0, 2706, 2732, 2721, 2718, 2720,
     2715, 2737, 2723,    0,    0,    0, 2736, 2740,    0, 2729,
     2738, 2731,    0, 2744, 2731, 2721, 2738, 2745, 2737, 2730,
     2738, 2750, 2742,    0, 2755, 2738,    0,    0,    0, 2752,
        0,    0, 2754,    0,    0, 2740,    0, 2745,    0,    0,
        0, 2757, 2750,    0, 2763, 2763, 2765, 2761, 2758,    0,
        0,    0, 2807,    0, 2751, 2757, 2771, 2762, 2795, 2786,
     2787, 2774, 2773, 2759, 2756, 2768, 2783, 2772, 2761, 2786,
     2782, 2772,    0, 2780, 2778, 2766, 2830, 2779, 2794, 2776,
     2780, 2783, 2778, 2790, 2795, 2783, 2783, 2803,    0, 2804,

        0, 2785, 2801, 2788, 2786, 2804, 2790, 2798, 2807,    0,
     2788, 2814, 2803, 2800, 2802, 2797, 2819, 2805,    0,    0,
        0, 2818, 2822,    0, 2811, 2820, 2813,    0, 2826, 2813,
     2803, 2820, 2827, 2819, 2812, 2819, 2831, 2823,    0, 2836,
     2819,    0,    0,    0, 2833,    0,    0, 2835,    0,    0,
     2821,    0, 2826,    0,    0,    0, 2830, 5070, 2840, 2824,
     2826, 2834, 2835, 2834, 2887, 2888, 2887, 2827,    0, 2834,
     2839, 2855, 2856, 2857, 2858, 2859, 2840, 2845, 2862,    0,
        0, 2863,    0, 2861, 2860, 2851, 2855,    0, 2900, 2857,
     2852, 2862, 2847, 2872, 2866, 2853, 2858, 2857, 2858, 2874,

     2880, 2863, 2882, 2864, 2879, 2878, 2861,    0, 2869, 2875,
     2888, 2885, 2880, 2879, 2889,    0, 2889, 2876, 2897,    0,
     2889, 2887, 2900, 2896, 2893, 2889, 2903, 2900,    0, 2894,
        0,    0, 2887,    0,    0,    0, 2889, 2906, 2910, 2902,
     2912, 2895, 2895, 2901, 2890, 2955, 2956, 2955, 2895,    0,
     2902, 2907, 2923, 2924, 2925, 2926, 2927, 2908, 2913, 2930,
        0,    0, 2931,    0, 2929, 2928, 2919, 2923,    0, 2968,
     2925, 2920, 2930, 2915, 2940, 2934, 2921, 2926, 2925, 2926,
     2942, 2948, 2931, 2950, 2932, 2947, 2946, 2929,    0, 2937,
     2943, 2956, 2953, 2948, 2947, 2957,    0, 2957, 2944, 2965,

        0, 2957, 2955, 2968, 2964, 2961, 2957, 2971, 2968,    0,
     2962,    0,    0, 2955,    0,    0,    0, 2957, 2974, 2973,
     2968, 2989, 2962, 2977, 2962, 2970, 3017,    0,    0,    0,
     2967, 2984, 2988, 2988, 2992, 2995, 2996, 2992, 2993, 2998,
     3000,    0,    0, 2987,    0,    0, 2993, 2998, 2997,    0,
     2993, 2988, 2998, 3009, 2989, 2992, 2988,    0, 3013, 3000,
        0, 2998, 3016,    0, 3013, 3006, 3004, 3011, 3020, 3020,
        0, 3026, 3027, 3028,    0, 3011,    0,    0, 3026, 3017,
     3032, 3021, 3034, 3010, 3011, 3032, 3037, 3039, 3026,    0,
     3036, 3033, 3023, 3039, 3077,    0,    0,    0, 3027, 3044,

     3048, 3048, 3052, 3055, 3056, 3052, 3053, 3058, 3060,    0,
        0, 3047,    0,    0, 3053, 3058, 3057,    0, 3053, 3048,
     3058, 3069, 3049, 3052, 3048,    0, 3073, 3060,    0, 3058,
     3076,    0, 3073, 3066, 3064, 3071, 3080, 3080,    0, 3086,
     3087, 3088,    0, 3071,    0,    0, 3086, 3077, 3092, 3081,
     3094, 3070, 3071, 3092, 3097, 3099, 3158, 3081, 5070, 5070,
     3097, 3088,    0, 3099, 3104,    0, 3088, 3098, 3108, 3087,
     3103, 3106,    0,    0,    0, 3116,    0, 3105, 3113, 3095,
     3120,    0, 3122, 3109, 3118, 3112, 3118, 3113, 3128, 3126,
     3130,    0, 3123, 3130, 3128, 3115, 3116, 3136, 3120, 3121,

     3139,    0, 3141, 3139, 3143, 3144, 3140,    0, 3139, 3129,
     3136, 3149,    0, 3134, 3133, 3140,    0, 3148, 3140, 3129,
     3156,    0,    0, 3152, 3157,    0, 3141, 3151, 3161, 3139,
     3155, 3157,    0,    0,    0, 3168,    0, 3157, 3165, 3147,
     3172,    0, 3174, 3162, 3170, 3164, 3170, 3165, 3180, 3178,
     3182,    0, 3175, 3182, 3180, 3167, 3168, 3188, 3172, 3173,
     3191,    0, 3193, 3191, 3195, 3196, 3192,    0, 3191, 3181,
     3188, 3201,    0, 3186, 3185, 3192, 3205, 3264, 3265, 3190,
     5070, 3189, 3192, 3199, 3194, 3198, 3194, 3200, 3197, 3210,
     3221, 3205, 3203, 3204, 3198, 3224, 3227, 3231, 3222, 3239,

     3240, 3236,    0,    0, 3216, 3220, 3232, 3241, 3235, 3229,
     3229,    0, 3241, 3246, 3249, 3237, 3253, 3236, 3234, 3245,
        0,    0, 3255, 3259, 3255,    0,    0, 3256, 3242,    0,
     3263, 3244, 3260, 3245, 3249, 3256, 3251, 3255, 3251, 3257,
     3253, 3265, 3261, 3261, 3259, 3260, 3254, 3280, 3272, 3276,
     3267, 3284, 3286, 3282,    0,    0, 3262, 3266, 3278, 3286,
     3280, 3274, 3274,    0, 3286, 3291, 3294, 3282, 3298, 3281,
     3279, 3290,    0,    0, 3300, 3304, 3300,    0,    0, 3301,
     3287,    0, 5070, 3366, 3367, 3414, 3488, 3303, 3312, 3294,
        0, 3314, 3303, 3295, 3306, 3317, 3302, 3321, 3318, 3323,

     3324, 3321,    0,    0, 3320, 3309, 3324, 3329,    0,    0,
     3326, 3332, 3333, 3315, 3335, 3317,    0, 3336,    0, 3334,
     3332, 3316, 3323, 3342, 3343, 3325, 3326, 3340, 3333,    0,
     3349, 3350, 3351, 3338, 3333,    0, 3353, 3342, 3334, 3345,
     3355, 3340, 3359, 3356, 3361, 3362, 3367,    0,    0, 3359,
     3349, 3364, 3369,    0,    0, 3366, 3373, 3383, 3365, 3385,
     3366,    0, 3385,    0, 3383, 3381, 3366, 3373, 3392, 3393,
     3375, 3376, 3393, 3386,    0, 3461, 5070,    0, 3459, 3435,
     3470, 3457, 3521, 3508, 3541, 3603,    0, 3591, 3605, 3638,
     3392, 3388,    0, 3385, 3406, 3414,    0, 3412, 3401, 3410,

     3421, 3407, 3416, 3428, 3408, 3418, 3428, 3415, 3418, 3422,
     3441, 3442, 3427, 3456, 3443, 3451, 3464, 3456,    0,    0,
     3454, 3449, 3469, 3445, 3456, 3470,    0, 3456, 3478, 3470,
        0, 3455, 3474, 3480,    0, 3478, 3468, 3478, 3491, 3476,
     3487, 3501, 3480, 3493, 3503, 3491, 3493, 3494, 3512, 3518,
     3496, 3519, 3508, 3516, 3532, 3526,    0,    0, 3524, 3518,
     3538, 3514, 3521, 3535, 3605, 5070,    0, 3600, 3658, 3594,
     3583, 3582, 3602, 3729, 3611, 3599, 3621, 3633, 3580, 3583,
     3593, 3591, 3592,    0, 3577, 3585, 3597, 3608, 3601, 3612,
        0, 3605, 3604, 3625, 3620,    0, 3609, 3614, 3611, 3617,

     3628, 3616, 3630,    0, 3631, 3634, 3635, 3618, 3621, 3626,
     3629,    0,    0, 3632,    0, 3634, 3652, 3650, 3651,    0,
     3636, 3644, 3655, 3656, 3648, 3657,    0, 3647, 3643, 3664,
     3658,    0, 3647, 3654, 3652, 3657, 3668, 3656, 3670,    0,
     3671, 3674, 3675, 3660, 3663, 3665, 3668,    0,    0, 3783,
     3733, 3776, 3717,    0, 3828, 3822, 3861, 3719, 5070, 3673,
     3684,    0, 3680,    0, 3676, 3680, 3681,    0, 3710, 3705,
     3700, 3716,    0, 3701, 3707, 3705, 3711, 3709, 3716, 3721,
     3747, 3736,    0, 3747,    0, 3786, 3750, 3747, 3743, 3743,
        0, 3742,    0, 3738, 3742, 3743,    0, 3770, 3765, 3757,

     3770,    0, 3755, 3763, 3759, 3766, 3764, 3763, 3768, 3790,
     3786,    0, 3794,    0, 3833, 3796, 3854, 3840, 3839, 3855,
     3856, 3847, 3846, 3864, 3805, 3817, 3809,    0,    0,    0,
     3813,    0, 3820, 3812, 3819, 3810, 3805, 3824, 3816, 3811,
     3819, 3838, 3822, 3827, 3847, 3850,    0,    0, 3836,    0,
     3846, 3838,    0,    0,    0, 3843,    0, 3850, 3842, 3849,
     3840, 3835, 3852, 3843, 3838, 3844, 3862, 3846, 3847, 3867,
     3869,    0,    0, 3904, 3906, 3875,    0, 3858, 3862,    0,
     3865, 3872, 3860,    0, 3874, 3863,    0, 3866, 3865, 3868,
     3872, 3869, 3886, 3876,    0, 3873, 3877,    0, 3880, 3887,

     3875,    0, 3889, 3877,    0, 3880, 3879, 3882, 3886, 3883,
     3900, 3903,    0, 3902, 3890, 3893, 3890, 3895, 3892, 3890,
     3897, 3892,    0, 3895, 3903, 3916,    0, 3914, 3902, 3905,
     3902, 3907, 3904, 3902, 3909, 3904,    0, 3907, 3915, 3908,
     3928, 3929,    0, 3910,    0, 3911, 3930, 3916, 3932,    0,
     3935, 3937, 3937, 3938,    0, 3919,    0, 3920, 3939, 3925,
     3941,    0, 3944, 3926, 3935, 3928, 3946, 3947, 3931,    0,
     3932, 3934,    0, 3942, 3935, 3953, 3954, 3938,    0, 3939,
     3941, 3943,    0, 3953, 3943, 3944, 3950, 3951, 3948,    0,
     3959, 3949, 3950, 3956, 3957, 3954, 3965, 3973, 3961, 3962,

     3960, 3961,    0, 3978, 3966, 3967, 3965, 3966,    0, 3983,
     3974, 3969, 3970,    0,    0, 3977, 3972, 3973,    0,    0,
     3971, 3988,    0,    0, 3989,    0,    0, 3975, 3996, 3997,
     3993, 3983, 3984, 5070,    0,    0, 5070, 4061, 4073, 4085,
     4097, 4109, 4121, 4133, 4145, 4157, 4169, 4181, 4193, 4205,
     4217, 4229, 4241, 4253, 4263, 4273, 4285, 4297, 4309, 4321,
     4333, 4345, 4356, 4364, 4372, 4382, 4389, 4390, 4398, 4410,
     4422, 4434, 4446, 4458, 4470, 4482, 4493, 4501, 4509, 4513,
     4521, 4533, 4542, 4549, 4555, 4558, 4568, 4580, 4592, 4604
    } ;

static yyconst flex_int16_t yy_def[3191] =
    {   0,
     3138, 3138, 3137,    3, 3139, 3139, 3140, 3140, 3141, 3141,
     3142, 3142, 3143, 3143, 3144, 3144, 3145, 3145, 3146, 3146,
     3147, 3147, 3148, 3148, 3137,   25, 3137,   27, 3149, 3149,
     3150, 3150, 3151, 3151, 3152, 3152, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3153, 3154, 3155, 3137, 3137, 3156, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3155, 3137, 3137, 3137, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3137, 3137, 3157, 3137, 3137,
     3137, 3158, 3137, 3137, 3137, 3137, 3137, 3159, 3160, 3137,

     3137, 3137, 3137, 3161, 3137, 3137, 3137, 3162, 3137, 3163,
     3163, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3164, 3137, 3137, 3164, 3164, 3164, 3164, 3164, 3164,
     3137, 3137, 3137, 3137, 3137, 3137, 3165, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3165, 3165, 3165, 3165,
     3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165, 3165,
     3165, 3165, 3165, 3165, 3165, 3165, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,

     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3154, 3137,
     3137, 3137, 3153, 3153, 3137, 3153, 3153, 3153, 3153, 3153,
     3153, 3154, 3154, 3166, 3154, 3154, 3154, 3154, 3154, 3155,
     3137, 3137, 3137, 3156, 3156, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,  244, 3137,
     3167, 3137, 3137, 3137, 3137, 3137, 3137, 3168, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3153,
     3156, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3137, 3137, 3169, 3137, 3137, 3170, 3137,
     3171, 3172, 3137, 3172, 3171, 3171, 3173, 3171, 3137, 3174,
     3172, 3137, 3137, 3175, 3137, 3137, 3176, 3177, 3177, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3178, 3137, 3178,
     3178, 3178, 3178, 3178, 3178, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3179, 3137, 3137, 3137, 3137, 3137, 3180, 3137,

     3137, 3137, 3137, 3137, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3181, 3181, 3137, 3181, 3181, 3181, 3182, 3182, 3182, 3182,
     3182, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3183, 3137, 3137,

     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3173,
     3173, 3137, 3173, 3173, 3173, 3171, 3174, 3137, 3137, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178,
     3137, 3137, 3137, 3137, 3137, 3184, 3137, 3137, 3137, 3137,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3137, 3137, 3137, 3137, 3182, 3182, 3182, 3182,
     3182, 3137,  493, 3137,  493, 3137, 3137, 3137, 3137, 3185,
     3186, 3183, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3137, 3171, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178,

     3137, 3137, 3137, 3137, 3184, 3137, 3137, 3137, 3137, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3137, 3137, 3137, 3182,
     3182, 3182, 3182, 3182, 3137, 3137, 3137, 3137, 3186, 3137,
     3137, 3137, 3137, 3137, 3137,  493, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3171, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3178, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3137, 3137, 3182, 3187, 3182, 3182, 3188, 3137, 3137,
     3137,  493, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3171, 3178, 3178, 3178, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3137, 3137, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3137, 3137, 3189, 3187, 3187, 3190, 3188,
     3188, 3137,  493, 3137, 3137, 3137, 3137, 3137, 3137, 3137,

     3137, 3137, 3137, 3137, 3137, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3178, 3178, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3137, 3137,
     3189, 3189, 3190, 3190, 3190, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3155, 3155, 3137, 3137, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3178, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3137, 3137, 3190, 3137,
     3137, 3137, 3137, 3137, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178,
     3178, 3178, 3178, 3178, 3178, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3137,
     3190, 3137, 3137, 3137, 3137, 3137, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178, 3178,
     3178, 3178, 3178, 3178, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3137, 3190, 3137, 3137, 3137,
     3137, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178, 3178, 3178,
     3178, 3178, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3137, 3190, 3190, 3137,
     3137, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3178, 3178, 3178, 3178, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3137, 3190, 3190, 3190, 3190, 3137, 3137, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3178, 3178, 3178, 3178, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3190, 3137, 3190, 3190, 2586,
     3190, 3190, 3190, 3190, 3190, 3190, 2587, 3190, 3190, 3190,
     3137, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178, 3178, 3178,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3190, 3137, 3190, 3190, 3190, 3190,
     3190, 3190, 3190, 2587, 3190, 3190, 3190, 3190, 3137, 3137,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,

     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3178, 3178, 3178, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3190,
     3190, 3190, 3190, 2774, 3190, 3190, 3190, 3190, 3137, 3137,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3190, 3190, 3190, 3190,
     3190, 3190, 3190, 3190, 3137, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3178, 3178,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3190, 3190, 3137, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3178, 3179, 3179, 3179, 3179, 3179, 3179,

     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3155, 3155, 3155, 3178, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3137,
     3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3178, 3179, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3179, 3179, 3137, 3155, 3155, 3155, 3155, 3155, 3155,
     3155, 3155, 3178, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
     3179, 3137, 3155, 3155, 3155, 3155, 3155, 3155, 3155, 3179,
     3179, 3179, 3179, 3179, 3179, 3179, 3137, 3155, 3155, 3155,

     3155, 3155, 3155, 3179, 3179, 3179, 3179, 3179, 3179, 3137,
     3155, 3155, 3155, 3155, 3155, 3179, 3179, 3179, 3179, 3179,
     3137, 3155, 3155, 3155, 3179, 3179, 3179, 3137, 3155, 3179,
     3137, 3155, 3179, 3137, 3155, 3179,    0, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137
    } ;

static yyconst flex_uint16_t yy_nxt[5164] =
    {   0,
       39,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   39,   39,   50,   51,   39,   52,   53,   54,
       55,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       57,   58,   59,   60,   61,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   62,   46,   46,   46,   46,
       46,   46,   46,   62,   46,   46,   63,   64,   39,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   46,   74,
       46,   46,   75,   76,   77,   78,   79,   46,   80,   81,
       82,   83,   84,   85,   46,   46,   46,   86,   87,   39,
       39,   39,   39,   89,   89,   95,   96,   97,  112,   98,

       99,  111,  112, 1198,   90,   90,  111,  112,  105,   91,
       91,  105,  100,   95,   96,   97,  112,   98,   99,  106,
      112,  210,  106,  112,  107,  115,  116,  107,  265,  266,
      100,  112,  115,  116,  112,  123,  124,  125,  101,  232,
      118,  119,  112,  118,  119,  126,  101,  123,  124,  125,
      102,  189,  190,  121,  208,  191,  101,  126,  112,  209,
      112, 1199,  233,  112,  101,  237,  245,  270,  102,  189,
      190,  246,  271,  191,  103,  121,  268,  269,  211,  212,
      239,  340,  300,  238,  301,  247,  113,  341,  112,  308,
      127,  113,  103,  112, 1200,  302,  240,  241,  303,  309,

      265,  266,  127,  128,  128,  129,  130,  131,  128,  128,
      128,  132,  128,  128,  128,  128,  133,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  128,
      134,  128,  128,  135,  136,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  137,  132,  132,  138,
      132,  132,  132,  139,  132,  140,  132,  132,  132,  132,
      128,  128,  128,  128,  128,  128,  141,  141,  142,  143,

      144,  145,  146,  141,  147,  148,  149,  141,  150,  151,
      152,  153,  154,  155,  156,  157,  158,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  160,  141,  161,  162,
      163,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  164,  165,  141,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  147,  175,  147,  147,  176,  177,
      178,  179,  180,  147,  181,  182,  183,  184,  185,  186,
      147,  147,  147,  141,  187,  141,  141,  141,  141,  193,
      194,  195,  193,  194,  195,  199,  200,  201,  326,  214,

      196,  327,  272,  196,  215,  202,  199,  200,  201,  216,
      217,  242,  344,  369, 1040,  243,  202,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  304,  310,  313,
      311,  279,  314,  232,  305,  315,  324,  317,  306,  321,
      312,  307, 1040,  322,  197,  318,  325,  197,  353,  342,
      203,  273,  361,  204,  343,  218,  233,  329,  330,  323,
      205,  203,  219,  220,  204,  274,  242,  345, 1201,  331,
      243,  205,  332,  275,  363,  206,  210,  429,  276,  277,
      207,  278,  333,  270,  350,  334,  206,  430,  271,  351,
      221,  207,  223,  280,  281,  335,  359,  423,  370,  354,

      424,  360,  336,  356,  458,  337,  268,  269,  282,  459,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
     1202,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  387,  237,  211,  212,  515,  372,  373,  373,  438,
      404,  388,  389,  421,  239,  422,  374,  439,  442,  516,
      238,  338,  443,  431,  225,  432,  339,  445,  272,  226,
      240,  241,  227,  425,  462,  433,  228,  446,  444,  463,
      426,  229,  248,  358,  427,  447,  570,  428,  448,  249,
      571,  250,  250,  250,  250,  250,  250,  250,  250,  251,
      251,  375,  460,  434,  390,  391,  435,  252,  461,  436,

      253,  254,  280,  281,  255,  256,  256,  273,  208,  592,
      344,  491,  491,  209,  257,  215,  258,  282, 1203,  215,
      215,  274,  392,  252,  450,  451,  253,  254,  593,  275,
      255,  256,  215,  256,  276,  277,  452,  278,  482,  453,
      215,  215,  257,  215,  215,  258,  259,  559,  560,  606,
      594,  717,  607,  249,  369,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  345,  218,  595,  718,  454,
      218,  218,  455,  272,  253,  254,  508,  518,  261,  262,
      262,  350,  456,  218,  235,  519,  351,  509,  263,  457,
      249,  218,  218,  564,  218,  218,  565,  585,  576,  602,

      253,  254,  566,  586,  261,  262,  577,  262,  494,  603,
      495,  253,  254,  496,  588,  497,  263,  284,  285,  286,
      287,  353,  273,  288, 1204,  289,  589,  590,  290, 1205,
      256,  256,  256,  291,  292,  641,  274,  253,  254,  370,
      256,  708,  293,  642,  275,  294,  295,  709,  296,  276,
      277,  297,  278,  598,  631,  631,  256,  256, 1206,  256,
      721,  298,  599,  372,  299,  394,  682,  683,  256,  722,
      353, 1207,  354,  374,  394,  394,  394,  394,  394,  394,
      394,  394, 1208,  693,  256,  256,  256,  694,  699,  715,
      395,  255,  256,  256,  256, 1209,  700,  396,  397,  397,

      729,  256,  725,  730,  262,  262,  262,  398,  716,  399,
      256,  256,  726,  256,  262,  749,  395,  255,  256,  497,
      256,  354,  256,  396,  397,  687,  397, 1210,  688,  256,
      262,  262,  711,  262,  689,  398,  843,  844,  399,  400,
      473,  474,  262,  757,  712,  713, 1211,  502,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  473,  474,
     1212,  401,  402,  402,  472,  473,  474,  490,  492, 1085,
      492,  403, 1213,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493, 1214,  476,  763, 1086,  401,  402,  764,

      402,  736,  474,  490, 1215,  261,  262,  262,  788,  403,
      405,  406,  407,  408,  826,  262,  409, 1216,  410, 1219,
      819,  411,  476,  397,  397,  397,  412,  413,  789,  476,
      820,  261,  262,  397,  262,  414,  877,  821,  415,  416,
      499,  417,  500,  262,  418,  501,  878,  502,  790,  397,
      397,  827,  397,  828,  419,  476,  791,  420,  223,  792,
     1222,  397,  262,  262,  262,  806,  829,  904,  488,  807,
      488,  635,  262,  612,  613,  488,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  620, 1095,  262,  262,
     1106,  262,  621,  909,  488, 1096,  488,  640,  622,  927,

      262,  623,  488, 1223,  742,  624,  742,  625, 1107,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  928,
      225,  356,  784,  982,  983,  226, 1224,  615,  227,  785,
      786,  787,  228,  809,  611,  612,  613,  229,  223,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357, 1225,
      810,  356,  811,  812, 1082, 1083,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224, 1217, 1218, 1226,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  795,
     1117,  612,  613, 1118,  396,  397,  397,  796, 1227,  615,
      797,  358,  823,  798,  397, 1228,  824,  945,  888,  613,

      225,  946,  632, 1229,  633,  226,  825,  634,  227,  635,
      396,  397,  228,  397, 1113, 1232, 1233,  229,  472,  473,
      474,  358,  397, 1114,  397,  397,  397, 1234,  487, 1220,
     1235,  487,  487,  487,  397,  615,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475, 1221, 1230,  929, 1236,
      397,  397,  615,  397,  487, 1231,  930,  487,  487,  931,
      487, 1237,  397,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  476,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  637, 1238,  638, 1239,  801,  639,
     1240,  640,  485,  486,  487,  802,  803,  487,  487,  487,

      804,  805,  923,  488, 1243, 1016,  402,  402,  402,  924,
      925,  926, 1244,  962,  934, 1017,  402,  963,  485,  486,
      487, 1245,  935,  487,  487,  936,  487,  964,  937,  958,
      814,  488,  402,  402,  815,  402,  816,  488,  248,  959,
     1241,  817, 1246,  818,  402, 1247,  960,  248,  248,  248,
      248,  248,  248,  248,  248,  402,  402,  402, 1242, 1250,
     1251,  940, 1254, 1252, 1255,  402, 1253, 1256,  941,  942,
      255,  256,  256,  943,  944,  401,  402,  402,  965, 1047,
      257,  402,  402, 1248,  402,  402,  948, 1048, 1257, 1258,
     1049, 1259, 1249,  402, 1260, 1261,  255,  256, 1262,  256,

     1263,  401,  402,  949,  402,  950,  951, 1264,  257,  248,
     1265, 1266, 1267,  402, 1268,  966,  249,  967,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  251, 1269, 1166,
      968, 1270, 1271, 1272, 1167, 1273, 1274,  253,  254, 1168,
     1169,  255,  256,  256, 1275, 1276, 1277,  744, 1278,  744,
     1279,  257,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745, 1280,  253,  254, 1281, 1282,  255,  256, 1283,
      256, 1284, 1285, 1286, 1287, 1288,  491,  491, 1289,  257,
      259, 1290,  631,  631, 1291, 1292, 1293, 1294, 1295,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  746,

      747,  747, 1296, 1297, 1298,  901,  902,  902, 1299,  748,
     1300, 1305,  261,  262,  262,  903, 1306, 1307, 1308,  906,
      907,  907,  263, 1309, 1310,  746,  747, 1311,  747,  908,
     1312,  901,  902, 1313,  902, 1314,  953,  748,  261,  262,
      954,  262,  955,  903, 1315,  906,  907,  956,  907,  957,
      263,  259, 1317, 1318, 1038, 1319, 1038,  908,  249, 1038,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
     1323, 1301, 1044, 1044, 1044, 1324, 1302, 1327, 1328,  253,
      254, 1303, 1304,  261,  262,  262, 1320, 1325, 1329, 1330,
     1326, 1331, 1332,  263,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743, 1333,  253,  254, 1334, 1335,  261,
      262, 1336,  262, 1337, 1320, 1338, 1339, 1340, 1341, 1342,
     1343,  263,  528, 1344,  529, 1345, 1346, 1347, 1348, 1349,
      530,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743, 1350, 1351, 1352, 1353, 1354, 1355, 1356,  531,  532,
      533,  534,  535,  536,  537,  538,  539, 1357, 1358,  540,
     1359, 1360,  541,  542, 1361,  543,  544,  545,  546,  547,
      548,  611,  612,  613,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745, 1362, 1363, 1364, 1365, 1366,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745, 1367,
     1370, 1368,  750, 1371, 1387, 1388, 1372, 1389, 1373,  751,
     1369, 1374, 1390, 1375, 1391, 1392,  615,  394, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400,  394,  394,  394,  394,
      394,  394,  394,  394,  753,  754,  754, 1401, 1402,  755,
     1403, 1404, 1405, 1406,  756, 1407, 1408, 1409, 1410,  396,
      397,  397, 1411, 1412,  747,  747,  747, 1413, 1414,  398,
      753,  754, 1415,  754,  747, 1416, 1417,  755, 1418, 1419,
     1420, 1421,  756, 1422, 1423,  396,  397, 1424,  397, 1425,
      747,  747, 1426,  747, 1427, 1428, 1429,  398,  400, 1430,

     1431, 1432,  747, 1433, 1434, 1435, 1436,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  746,  747,  747,
     1437, 1438, 1439,  753,  754,  754, 1440,  747, 1441, 1442,
      401,  402,  402,  756, 1443, 1444, 1445,  754,  754,  754,
      403, 1446, 1447,  746,  747, 1448,  747,  754, 1449,  753,
      754, 1450,  754, 1451, 1452,  747,  401,  402, 1453,  402,
     1455,  756, 1456,  754,  754, 1457,  754, 1458,  403,  651,
     1459,  652, 1460, 1461, 1045,  754, 1045,  653, 1462, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1463,
     1464, 1191, 1191, 1195, 1195,  654,  655,  656,  657,  658,

      659,  660,  661,  662, 1465, 1467,  663, 1466, 1191,  664,
      665, 1195,  666,  667,  668,  669,  670,  671,  472,  473,
      474, 1468, 1469, 1470, 1471, 1472,  750, 1473, 1474, 1475,
     1316, 1476, 1477,  751, 1478, 1479,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475, 1480, 1481,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  753,  754,
      754, 1482, 1483,  755, 1484, 1485, 1486, 1487,  756, 1488,
     1489, 1490, 1491,  476,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  753,  754, 1492,  754, 1493, 1494,
     1495,  755,  485,  490,  487, 1496,  756,  487,  487,  487,

      227, 1497, 1321,  488, 1321, 1500, 1501, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1517,  485,  490,
      487, 1498, 1518,  487,  487, 1519,  487, 1502, 1520, 1503,
     1499,  488, 1504, 1521, 1505, 1524, 1525,  488,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493, 1035, 1522,
     1036, 1526, 1523, 1037, 1527, 1038,  485, 1528,  487, 1529,
     1530,  487,  487,  487, 1531, 1532, 1533,  488, 1534, 1535,
      747,  747,  747, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
      747, 1543,  485, 1544,  487, 1545, 1546,  487,  487, 1547,
      487, 1548, 1549, 1550, 1551,  488,  747,  747, 1552,  747,

     1553,  488,  611,  612,  613, 1554, 1555, 1556,  747, 1557,
     1041, 1558, 1042, 1559, 1560, 1043, 1561, 1044, 1562, 1563,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
     1564, 1565,  754,  754,  754, 1566,  753,  754,  754, 1567,
     1568, 1569,  754, 1570, 1571, 1188,  754, 1189, 1572, 1573,
     1190, 1574, 1191, 1575,  902,  902,  902,  615,  754,  754,
     1576,  754,  753,  754,  902,  754, 1577,  902,  902,  902,
      754, 1578, 1579, 1580,  754, 1581, 1582,  902, 1583, 1584,
      902,  902, 1585,  902, 1586,  901,  902,  902, 1588,  906,
      907,  907,  902,  902,  902,  902,  902, 1589, 1591,  908,

     1038, 1044, 1192, 1594, 1193,  902, 1595, 1194, 1596, 1195,
     1597,  901,  902, 1598,  902,  906,  907, 1599,  907,  907,
      907,  907, 1600,  902,  907,  907,  907,  908, 1601,  907,
     1602, 1603, 1604, 1605,  907, 1606, 1608,  906,  907,  907,
     1609, 1610, 1611, 1612, 1613,  907,  907,  907,  907, 1607,
      907,  907, 1614,  907, 1615, 1616, 1617,  907, 1618, 1619,
     1620, 1621,  907,  906,  907, 1622,  907, 1623, 1624, 1625,
     1626, 1627, 1628, 1629, 1630,  907, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1376, 1377, 1378, 1379,

     1380, 1454, 1631, 1632, 1381, 1633, 1634, 1635, 1636, 1637,
     1645, 1382, 1646, 1383, 1384, 1647, 1385, 1386, 1648,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357, 1506,
     1507, 1508, 1509, 1510, 1316, 1649, 1651, 1511, 1652, 1650,
     1653, 1654, 1655, 1657, 1512, 1656, 1513, 1514, 1660, 1515,
     1516, 1661,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224, 1658, 1659, 1662, 1665, 1663, 1592, 1666, 1592,
     1664,  358, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,

     1322, 1322, 1638, 1667, 1639, 1668, 1669, 1640, 1670, 1671,
     1672, 1673, 1674, 1675, 1676, 1641, 1677, 1678, 1679, 1680,
     1681, 1642, 1643, 1644, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
     1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
     1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
     1454, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
     1191, 1195, 1729, 1730, 1727, 1731, 1732, 1733,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357, 1728, 1734,
     1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,

     1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1758, 1759, 1766, 1760, 1767, 1768, 1761,
     1769, 1770, 1772, 1773, 1774, 1771, 1775, 1762, 1776, 1778,
     1781, 1777, 1782, 1763, 1764, 1765, 1779, 1780, 1783, 1784,
     1786, 1787, 1788, 1785, 1789, 1790, 1791, 1792, 1793, 1794,
     1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
     1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
     1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
     1835, 1836, 1837, 1838, 1839, 1840, 1842, 1588, 1844, 1591,

     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1856,
     1866, 1867, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
     1877, 1868, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
     1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
     1896, 1897, 1845, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
     1905, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1906, 1914,
     1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,

     1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1957, 1958, 1959, 1960, 1961, 1855, 1962, 1963,
     1964, 1965, 1966, 1967, 1968, 1969, 1970, 1856, 1971, 1972,
     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1973,
     1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
     1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
     2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012, 2013,
     2014, 2015, 2016, 2017, 2018, 2011, 2019, 2020, 2021, 2022,

     2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
     2053, 2054, 2055, 2056, 2057, 2058, 1842, 1844, 2059, 2060,
     2061, 2062, 2063, 2064, 1855, 2065, 2068, 2066, 2069, 2070,
     2067, 2071, 2072, 2073, 1856, 2074, 2075, 2076, 2077, 2078,
     2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
     2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
     2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
     2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,

     2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
     2129, 1845, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
     2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2149,
     2147, 2150, 2151, 2148, 2152, 2153, 2154, 2155, 2156, 2157,
     2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
     2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
     2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
     2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
     2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207,
     2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,

     2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
     2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
     2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
     2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257,
     2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
     2269, 2268, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277,
     2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287,
     2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297,
     2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307,
     2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,

     2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327,
     2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2337, 2336,
     2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347,
     2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357,
     2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367,
     2368, 2369, 2373, 2370, 2371, 2374, 2375, 2376, 2377, 2378,
     2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2372, 2390,
     2391, 2392, 2393, 2379, 2394, 2395, 2396, 2397, 2380, 2398,
     2381, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407,
     2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417,

     2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427,
     2428, 2429, 2433, 2430, 2431, 2434, 2435, 2436, 2437, 2438,
     2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2432, 2450,
     2451, 2452, 2453, 2439, 2454, 2455, 2456, 2457, 2440, 2458,
     2441, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467,
     2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477,
     2478, 2480, 2481, 2482, 2483, 2484, 2485, 2487, 2486, 2489,
     2479, 2490, 2491, 2488, 2494, 2492, 2496, 2497, 2493, 2498,
     2499, 2500, 2501, 2502, 2495, 2503, 2504, 2505, 2506, 2507,
     2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517,

     2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527,
     2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
     2539, 2538, 2541, 2542, 2543, 2546, 2540, 2544, 2548, 2549,
     2545, 2550, 2551, 2552, 2553, 2547, 2554, 2555, 2556, 2557,
     2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567,
     2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577,
     2578, 2579, 2580, 2581, 2582, 2583, 2478, 2584, 2588, 2589,
     2590, 2591, 2592, 2593, 2594, 2595, 2479, 2596, 2585, 2597,
     2600, 2601, 2602, 2603, 2604, 2586, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2598, 2605, 2606, 2607, 2608,

     2609, 2610, 2611, 2612, 2613, 2599, 2614, 2615, 2616, 2617,
     2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627,
     2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637,
     2638, 2639, 2640, 2641, 2642, 2643, 2645, 2646, 2647, 2648,
     2649, 2650, 2651, 2652, 2653, 2644, 2654, 2655, 2656, 2657,
     2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667,
     2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2584, 2676,
     2677, 2678, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2585,
     2698, 2699, 2700, 2701, 2702, 2703, 2704, 2706, 2707, 2708,
     2709, 2710, 2711, 2712, 2713, 2714, 2705, 2715, 2716, 2717,

     2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727,
     2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737,
     2738, 2739, 2740, 2741, 2679, 2680, 2744, 2681, 2745, 2746,
     2747, 2748, 2742, 2749, 2680, 2680, 2680, 2680, 2680, 2680,
     2680, 2680, 2743, 2750, 2751, 2752, 2753, 2754, 2755, 2756,
     2682, 2757, 2758, 2759, 2760, 2761, 2762, 2683, 2684, 2684,
     2763, 2764, 2677, 2676, 2677, 2678, 2779, 2685, 2780, 2686,
     2781, 1843, 2765, 2766, 2767, 2782, 2682, 2769, 2769, 2783,
     2784, 2785, 2786, 2683, 2684, 2787, 2684, 2788, 2789, 2790,
     1843, 2791, 2792, 2793, 2794, 2685, 2795, 1843, 2686, 2687,

     2796, 2681, 2797, 2799, 2798, 2800, 2801, 2802, 2687, 2687,
     2687, 2687, 2687, 2687, 2687, 2687, 2687, 2687, 2679, 1843,
     2803, 2681, 2804, 2805, 2806, 2807, 2808, 2768, 2809, 2810,
     2811, 2688, 2689, 2689, 2681, 2812, 2813, 2814, 2815, 2816,
     2817, 2690, 2770, 2818, 2771, 2819, 2820, 2772, 2821, 2773,
     2822, 2684, 2684, 2684, 2681, 2823, 2824, 2688, 2689, 2825,
     2689, 2684, 2826, 2827, 2684, 2684, 2684, 2828, 2829, 2690,
     2830, 2831, 2832, 2833, 2684, 2834, 2838, 2684, 2684, 2835,
     2684, 2836, 2837, 2839, 2683, 2684, 2684, 2840, 2841, 2684,
     2684, 2684, 2842, 2684, 2684, 2843, 2844, 2845, 2846, 2847,

     2848, 2849, 2684, 2766, 2681, 2773, 2773, 2765, 2766, 2767,
     2683, 2684, 2775, 2684, 2776, 2681, 2853, 2777, 2681, 2778,
     2773, 2778, 2684, 2774, 2774, 2774, 2774, 2774, 2774, 2774,
     2774, 2774, 2774, 2858, 2689, 2689, 2689, 2778, 2774, 2774,
     2774, 2774, 2774, 2774, 2689, 2778, 2681, 2859, 2689, 2689,
     2689, 2681, 2860, 2861, 2862, 2863, 2864, 2865, 2689, 2866,
     2689, 2689, 2768, 2689, 2774, 2774, 2774, 2774, 2774, 2774,
     2867, 2681, 2689, 2868, 2689, 2689, 2869, 2689, 2769, 2769,
     2870, 2688, 2689, 2689, 2871, 2872, 2689, 2873, 2874, 2875,
     2876, 2689, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884,

     2885, 2850, 2851, 2851, 2886, 2887, 2888, 2688, 2689, 2889,
     2689, 2852, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2689,
     2897, 2898, 2899, 2900, 2901, 2902, 2903, 2850, 2851, 2904,
     2851, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2852,
     2854, 2913, 2914, 2915, 2916, 2773, 2681, 2778, 2925, 2854,
     2854, 2854, 2854, 2854, 2854, 2854, 2854, 2854, 2854, 2926,
     2927, 2928, 2929, 2930, 2854, 2854, 2854, 2854, 2854, 2854,
     2931, 2932, 2855, 2856, 2856, 2933, 2851, 2851, 2851, 2934,
     2935, 2936, 2857, 2937, 2938, 2939, 2851, 2940, 2941, 2681,
     2854, 2854, 2854, 2854, 2854, 2854, 2681, 2942, 2855, 2856,

     2943, 2856, 2851, 2851, 2917, 2851, 2918, 2944, 2945, 2919,
     2857, 2920, 2946, 2947, 2851, 2948, 2949, 2950, 2951, 2850,
     2851, 2851, 2952, 2953, 2954, 2955, 2851, 2851, 2851, 2851,
     2956, 2957, 2958, 2959, 2960, 2681, 2851, 2961, 2963, 2962,
     2964, 2681, 2965, 2966, 2967, 2850, 2851, 2968, 2851, 2921,
     2969, 2922, 2851, 2851, 2923, 2851, 2924, 2851, 2970, 2971,
     2972, 2973, 2920, 2920, 2851, 2856, 2856, 2856, 2681, 2924,
     2924, 2856, 2856, 2856, 2681, 2856, 2974, 2681, 2975, 2976,
     2920, 2856, 2924, 2977, 2978, 2979, 2980, 2981, 2982, 2983,
     2984, 2856, 2856, 2985, 2856, 2986, 2987, 2856, 2856, 2988,

     2856, 2989, 2990, 2856, 2855, 2856, 2856, 2991, 2992, 2856,
     2993, 2994, 2995, 2996, 2856, 2997, 2998, 2999, 3000, 3001,
     3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011,
     2855, 2856, 2920, 2856, 2924, 3012, 3013, 3014, 3015, 3016,
     3017, 3018, 2856, 3019, 3020, 3021, 3022, 3023, 3024, 3025,
     3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035,
     3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045,
     3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055,
     3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065,
     3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075,

     3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085,
     3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095,
     3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105,
     3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115,
     3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125,
     3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135,
     3136,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  213, 1197,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  222, 1196,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  230,  640,  635, 1187,  230,
      230,  230,  230,  234, 1186,  234, 1185,  234,  234,  234,
      234,  234,  234,  234,  234,  346, 1184,  346,  346, 1183,
      346,  346,  346,  346,  346,  346,  346,  349, 1182,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  352,
     1181,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  355, 1180,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  364, 1179,  364,  364, 1178,  364,  364,
      364,  364,  364,  364,  364,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  368, 1177,  368,  368,
      368,  368,  368,  368,  368,  368,  378, 1176, 1175, 1174,
      378,  378,  378,  378,  393, 1173, 1172, 1171,  393,  393,
      393,  393,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  251,  251,  498,  498,  346, 1170,

      346,  346, 1165,  346,  346,  346,  346,  346,  346,  346,
      349, 1164,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  355, 1163,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  352, 1162,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      364, 1161,  364,  364, 1160,  364,  364,  364,  364,  364,
      364,  364,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368, 1159,  368,  368,  368,  368,  368,

      368,  368,  368,  378, 1158, 1157, 1156,  378,  378,  378,
      378,  393, 1155, 1154, 1153,  393,  393,  393,  393,  636,
      636,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  222, 1152,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  752, 1151,  752,  752,  752,
      752,  752,  905, 1150, 1149,  905,  905,  905,  750, 1148,
     1147,  750,  750,  750, 1039, 1039, 1146, 1039, 1587, 1145,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1590, 1144, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1841, 1143, 1841, 1841, 1841, 1841, 1841, 1841,

     1841, 1841, 1841, 1841, 1843, 1142, 1843, 1843, 1843, 1843,
     1843, 1843, 1843, 1843, 1843, 1843, 1141, 1140, 1139, 1138,
     1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128,
     1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1116,
     1115, 1112, 1111, 1110, 1109, 1108, 1105, 1104, 1103, 1102,
     1101, 1100, 1099, 1098, 1097, 1094, 1093, 1092, 1091, 1090,
     1089, 1088, 1087, 1084, 1081, 1080, 1079, 1078, 1077, 1076,
     1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066,
     1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056,
     1055, 1054, 1053, 1052, 1051, 1050,  502,  497, 1034, 1033,

     1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023,
     1022, 1021, 1020, 1019, 1018, 1015, 1014, 1013, 1012, 1011,
     1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001,
     1000,  999,  998,  997,  996,  995,  994,  993,  992,  991,
      990,  989,  988,  987,  986,  985,  984,  981,  980,  979,
      978,  977,  976,  975,  974,  973,  972,  971,  970,  969,
      961,  952,  947,  939,  938,  933,  932,  922,  921,  920,
      919,  918,  917,  916,  915,  914,  913,  912,  911,  910,
      640,  640,  635,  635,  900,  899,  898,  897,  896,  895,
      894,  893,  892,  891,  890,  618,  889,  887,  886,  885,

      884,  883,  882,  881,  880,  879,  876,  875,  874,  873,
      872,  871,  870,  869,  868,  867,  866,  865,  864,  863,
      862,  861,  860,  859,  858,  857,  856,  855,  854,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  842,  841,
      840,  839,  838,  837,  836,  835,  834,  833,  832,  831,
      830,  822,  813,  808,  800,  799,  794,  793,  783,  782,
      781,  780,  779,  778,  777,  776,  775,  774,  773,  772,
      771,  770,  769,  768,  767,  766,  765,  762,  761,  760,
      759,  758,  502,  502,  497,  497,  741,  740,  739,  738,
      737,  735,  734,  733,  466,  464,  732,  731,  728,  727,

      724,  723,  720,  719,  714,  710,  707,  706,  705,  704,
      703,  702,  701,  698,  697,  696,  695,  692,  691,  690,
      686,  685,  684,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  650,  649,  648,  647,  646,  645,  644,
      643,  386,  630,  629,  628,  627,  626,  377,  373,  619,
      371,  361,  618,  616,  609,  608,  605,  604,  270,  601,
      600,  597,  596,  591,  587,  584,  583,  582,  581,  580,
      579,  578,  575,  574,  573,  572,  569,  568,  567,  563,
      562,  561,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  527,  526,  525,  524,  523,  522,  521,  520,

      517,  514,  513,  512,  511,  510,  507,  235,  506,  505,
      504,  503,  484,  483,  234,  481,  480,  479,  478,  477,
      470,  469,  468,  467,  466,  465,  464,  449,  441,  440,
      437,  283,  267,  264,  247,  236,  231,  386,  385,  384,
      383,  382,  381,  380,  379,  377,  376,  371,  366,  365,
      362,  361,  348,  347,  328,  320,  319,  316,  283,  267,
      264,  236,  235,  231, 3137,  109,  109,   93,   93,   37,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,

     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137
    } ;

static yyconst flex_int16_t yy_chk[5164] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    6,    9,    9,    9,   21,    9,

        9,   15,   15,  912,    5,    6,   16,   16,   11,    5,
        6,   12,    9,   10,   10,   10,   17,   10,   10,   11,
       22,   43,   12,   18,   11,   17,   17,   12,   59,   59,
       10,   19,   18,   18,   20,   23,   23,   23,    9,   48,
       19,   19,   29,   20,   20,   23,    9,   24,   24,   24,
        9,   29,   29,   21,   40,   29,   10,   24,   15,   40,
       30,  913,   48,   16,   10,   51,   54,   62,   10,   30,
       30,   54,   62,   30,    9,   22,   61,   61,   43,   43,
       52,   84,   67,   51,   67,   54,   15,   84,   15,   70,
       23,   16,   10,   16,  914,   68,   52,   52,   68,   70,

      161,  161,   24,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   31,
       31,   31,   32,   32,   32,   33,   33,   33,   79,   44,

       31,   79,   63,   32,   44,   33,   34,   34,   34,   44,
       44,   53,   87,  111,  751,   53,   34,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   69,   71,   72,
       71,   64,   72,  149,   69,   72,   78,   74,   69,   77,
       71,   69,  751,   77,   31,   74,   78,   32,   98,   85,
       33,   63,  103,   33,   85,   44,  149,   81,   81,   77,
       33,   34,   44,   44,   34,   63,  156,   87,  915,   81,
      156,   34,   81,   63,  103,   33,  145,  171,   63,   63,
       33,   63,   82,   83,   95,   82,   34,  171,   83,   95,
       44,   34,   45,   64,   64,   82,  100,  169,  111,   98,

      169,  100,   82,   99,  184,   83,  163,  163,   64,  184,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
      916,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  146,  153,  145,  145,  281,  126,  126,  126,  175,
      165,  146,  146,  168,  155,  168,  126,  175,  178,  281,
      153,   83,  178,  172,   45,  172,   83,  179,  164,   45,
      155,  155,   45,  170,  186,  172,   45,  179,  178,  186,
      170,   45,   55,   99,  170,  180,  312,  170,  180,   55,
      312,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,  126,  185,  173,  146,  146,  173,   55,  185,  173,

       55,   55,  165,  165,   55,   55,   55,  164,  208,  330,
      187,  252,  252,  208,   55,  213,   55,  165,  917,  214,
      216,  164,  146,   55,  182,  182,   55,   55,  330,  164,
       55,   55,  217,   55,  164,  164,  182,  164,  234,  182,
      219,  220,   55,  221,  270,   55,   56,  304,  304,  341,
      331,  452,  341,   56,  369,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,  187,  213,  331,  452,  183,
      214,  216,  183,  272,   56,   56,  274,  284,   56,   56,
       56,  350,  183,  217,  234,  284,  350,  274,   56,  183,
      251,  219,  220,  308,  221,  270,  308,  326,  318,  338,

       56,   56,  308,  326,   56,   56,  318,   56,  255,  338,
      255,  251,  251,  255,  328,  255,   56,   66,   66,   66,
       66,  352,  272,   66,  918,   66,  328,  328,   66,  919,
      255,  255,  255,   66,   66,  405,  272,  251,  251,  369,
      255,  447,   66,  405,  272,   66,   66,  447,   66,  272,
      272,   66,  272,  334,  395,  395,  255,  255,  920,  255,
      455,   66,  334,  372,   66,  158,  425,  425,  255,  455,
      361,  921,  352,  372,  158,  158,  158,  158,  158,  158,
      158,  158,  922,  433,  256,  256,  256,  433,  439,  451,
      158,  257,  257,  257,  256,  923,  439,  158,  158,  158,

      461,  257,  458,  461,  262,  262,  262,  158,  451,  158,
      256,  256,  458,  256,  262,  494,  158,  257,  257,  494,
      257,  361,  256,  158,  158,  429,  158,  924,  429,  257,
      262,  262,  449,  262,  429,  158,  563,  563,  158,  159,
      471,  471,  262,  499,  449,  449,  925,  499,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  474,  474,
      926,  159,  159,  159,  472,  472,  472,  249,  253,  794,
      253,  159,  927,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  928,  471,  511,  794,  159,  159,  511,

      159,  476,  476,  249,  929,  263,  263,  263,  532,  159,
      167,  167,  167,  167,  548,  263,  167,  930,  167,  932,
      545,  167,  474,  397,  397,  397,  167,  167,  532,  472,
      545,  263,  263,  397,  263,  167,  599,  545,  167,  167,
      261,  167,  261,  263,  167,  261,  599,  261,  533,  397,
      397,  548,  397,  548,  167,  476,  533,  167,  209,  533,
      934,  397,  261,  261,  261,  540,  548,  632,  485,  540,
      485,  632,  261,  610,  610,  485,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  380,  803,  261,  261,
      813,  261,  380,  637,  485,  803,  485,  637,  380,  655,

      261,  380,  485,  935,  486,  380,  486,  380,  813,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  655,
      209,  351,  531,  686,  686,  209,  936,  610,  209,  531,
      531,  531,  209,  542,  611,  611,  611,  209,  223,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  937,
      542,  356,  542,  542,  792,  792,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  931,  931,  938,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  536,
      822,  613,  613,  822,  398,  398,  398,  536,  939,  611,
      536,  351,  547,  536,  398,  940,  547,  663,  615,  615,

      223,  663,  396,  941,  396,  223,  547,  396,  223,  396,
      398,  398,  223,  398,  819,  943,  944,  223,  224,  224,
      224,  356,  398,  819,  396,  396,  396,  945,  487,  933,
      946,  487,  487,  487,  396,  613,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  933,  942,  656,  947,
      396,  396,  615,  396,  487,  942,  656,  487,  487,  656,
      487,  948,  396,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  224,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  401,  949,  401,  950,  539,  401,
      951,  401,  244,  244,  244,  539,  539,  244,  244,  244,

      539,  539,  654,  244,  953,  722,  401,  401,  401,  654,
      654,  654,  954,  670,  659,  722,  401,  670,  244,  244,
      244,  955,  659,  244,  244,  659,  244,  670,  659,  668,
      544,  244,  401,  401,  544,  401,  544,  244,  248,  668,
      952,  544,  956,  544,  401,  957,  668,  248,  248,  248,
      248,  248,  248,  248,  248,  402,  402,  402,  952,  959,
      960,  662,  962,  961,  963,  402,  961,  964,  662,  662,
      248,  248,  248,  662,  662,  403,  403,  403,  671,  759,
      248,  402,  402,  958,  402,  403,  665,  759,  965,  966,
      759,  967,  958,  402,  968,  969,  248,  248,  970,  248,

      971,  403,  403,  665,  403,  665,  665,  972,  248,  250,
      973,  974,  977,  403,  979,  671,  250,  671,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  981,  879,
      671,  982,  983,  984,  879,  985,  986,  250,  250,  879,
      879,  250,  250,  250,  987,  990,  991,  490,  992,  490,
      993,  250,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  995,  250,  250,  997,  998,  250,  250,  999,
      250, 1000, 1001, 1002, 1003, 1004,  491,  491, 1005,  250,
      259, 1006,  631,  631, 1007, 1008, 1009, 1010, 1011,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  491,

      491,  491, 1012, 1013, 1014,  631,  631,  631, 1016,  491,
     1017, 1019,  259,  259,  259,  631, 1020, 1021, 1022,  636,
      636,  636,  259, 1024, 1025,  491,  491, 1026,  491,  636,
     1027,  631,  631, 1029,  631, 1030,  667,  491,  259,  259,
      667,  259,  667,  631, 1031,  636,  636,  667,  636,  667,
      259,  260, 1033, 1034, 1036, 1035, 1037,  636,  260, 1035,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
     1041, 1018, 1042, 1043, 1041, 1047, 1018, 1049, 1050,  260,
      260, 1018, 1018,  260,  260,  260, 1039, 1048, 1051, 1052,
     1048, 1053, 1054,  260,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742, 1055,  260,  260, 1057, 1058,  260,
      260, 1059,  260, 1061, 1039, 1062, 1064, 1065, 1066, 1067,
     1068,  260,  293, 1069,  293, 1070, 1071, 1072, 1073, 1074,
      293,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743, 1075, 1076, 1077, 1078, 1079, 1080, 1081,  293,  293,
      293,  293,  293,  293,  293,  293,  293, 1082, 1083,  293,
     1084, 1085,  293,  293, 1086,  293,  293,  293,  293,  293,
      293,  357,  357,  357,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744, 1087, 1088, 1089, 1090, 1091,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745, 1092,
     1094, 1093,  498, 1095, 1099, 1100, 1096, 1101, 1096,  498,
     1093, 1096, 1102, 1096, 1103, 1104,  357,  394, 1104, 1105,
     1106, 1107, 1108, 1110, 1111, 1112,  394,  394,  394,  394,
      394,  394,  394,  394,  498,  498,  498, 1113, 1114,  498,
     1116, 1117, 1118, 1119,  498, 1120, 1121, 1123, 1124,  394,
      394,  394, 1125, 1126,  747,  747,  747, 1127, 1128,  394,
      498,  498, 1129,  498,  747, 1130, 1131,  498, 1135, 1136,
     1137, 1138,  498, 1139, 1140,  394,  394, 1141,  394, 1142,
      747,  747, 1144,  747, 1145, 1146, 1147,  394,  400, 1148,

     1149, 1150,  747, 1151, 1152, 1153, 1154,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  748,  748,  748,
     1155, 1156, 1158,  750,  750,  750, 1159,  748, 1160, 1161,
      400,  400,  400,  750, 1162, 1163, 1164,  754,  754,  754,
      400, 1166, 1167,  748,  748, 1168,  748,  754, 1169,  750,
      750, 1171,  750, 1173, 1174,  748,  400,  400, 1175,  400,
     1178,  750, 1179,  754,  754, 1180,  754, 1181,  400,  414,
     1182,  414, 1183, 1184,  755,  754,  755,  414, 1185,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755, 1186,
     1187, 1189, 1190, 1193, 1194,  414,  414,  414,  414,  414,

      414,  414,  414,  414, 1188, 1196,  414, 1192, 1188,  414,
      414, 1192,  414,  414,  414,  414,  414,  414,  475,  475,
      475, 1197, 1199, 1200, 1201, 1202,  752, 1203, 1204, 1205,
     1032, 1206, 1207,  752, 1208, 1209,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475, 1210, 1211, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,  752,  752,
      752, 1212, 1213,  752, 1214, 1215, 1216, 1217,  752, 1218,
     1219, 1220, 1221,  475,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  752,  752, 1222,  752, 1223, 1224,
     1225,  752,  489,  489,  489, 1226,  752,  489,  489,  489,

     1032, 1227, 1040,  489, 1040, 1229, 1230, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1234,  489,  489,
      489, 1228, 1235,  489,  489, 1236,  489, 1231, 1237, 1231,
     1228,  489, 1231, 1238, 1231, 1240, 1241,  489,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  746, 1239,
      746, 1242, 1239,  746, 1243,  746,  493, 1245,  493, 1246,
     1247,  493,  493,  493, 1248, 1249, 1251,  493, 1252, 1253,
      746,  746,  746, 1254, 1255, 1256, 1258, 1259, 1260, 1261,
      746, 1262,  493, 1263,  493, 1264, 1265,  493,  493, 1266,
      493, 1270, 1271, 1272, 1273,  493,  746,  746, 1274,  746,

     1275,  493,  614,  614,  614, 1276, 1277, 1279,  746, 1280,
      753, 1281,  753, 1282, 1283,  753, 1284,  753, 1285, 1286,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
     1287, 1288,  753,  753,  753, 1289,  756,  756,  756, 1290,
     1291, 1293,  753, 1294, 1295,  901,  756,  901, 1296, 1297,
      901, 1298,  901, 1299,  902,  902,  902,  614,  753,  753,
     1301,  753,  756,  756,  902,  756, 1302,  901,  901,  901,
      753, 1303, 1304, 1306,  756, 1308, 1309,  901, 1310, 1312,
      902,  902, 1313,  902, 1314,  903,  903,  903, 1315,  905,
      905,  905,  902,  901,  901,  903,  901, 1317, 1318,  905,

     1319, 1323,  906, 1324,  906,  901, 1325,  906, 1326,  906,
     1327,  903,  903, 1328,  903,  905,  905, 1329,  905,  907,
      907,  907, 1330,  903,  906,  906,  906,  905, 1331,  907,
     1332, 1333, 1334, 1336,  906, 1337, 1338,  908,  908,  908,
     1339, 1340, 1341, 1342, 1343,  907,  907,  908,  907, 1337,
      906,  906, 1344,  906, 1345, 1346, 1347,  907, 1348, 1349,
     1350, 1351,  906,  908,  908, 1352,  908, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1359,  908, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1098, 1098, 1098, 1098,

     1098, 1177, 1360, 1361, 1098, 1362, 1363, 1364, 1365, 1366,
     1368, 1098, 1369, 1098, 1098, 1370, 1098, 1098, 1371, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1233,
     1233, 1233, 1233, 1233, 1316, 1372, 1373, 1233, 1374, 1372,
     1376, 1377, 1378, 1379, 1233, 1378, 1233, 1233, 1381, 1233,
     1233, 1382, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1380, 1380, 1383, 1385, 1384, 1320, 1386, 1320,
     1384, 1177, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,

     1322, 1322, 1367, 1387, 1367, 1388, 1389, 1367, 1390, 1391,
     1392, 1393, 1395, 1396, 1397, 1367, 1398, 1399, 1400, 1401,
     1402, 1367, 1367, 1367, 1403, 1404, 1405, 1406, 1407, 1408,
     1409, 1411, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1424, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1436,
     1437, 1441, 1444, 1445, 1446, 1448, 1450, 1451, 1452, 1453,
     1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1463, 1464,
     1465, 1466, 1468, 1469, 1467, 1470, 1471, 1472, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1467, 1473,
     1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,

     1484, 1485, 1486, 1487, 1488, 1489, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1497, 1499, 1500, 1497,
     1501, 1502, 1503, 1504, 1506, 1502, 1507, 1497, 1508, 1509,
     1511, 1508, 1512, 1497, 1497, 1497, 1510, 1510, 1513, 1514,
     1515, 1516, 1517, 1514, 1518, 1519, 1520, 1521, 1522, 1523,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1541, 1543, 1544, 1545, 1546,
     1547, 1548, 1549, 1550, 1551, 1554, 1558, 1559, 1560, 1561,
     1562, 1563, 1564, 1566, 1567, 1571, 1574, 1575, 1576, 1578,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1588, 1589, 1591,

     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1594, 1595, 1597, 1598, 1601, 1602, 1603, 1606, 1607, 1608,
     1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1608,
     1618, 1619, 1621, 1622, 1624, 1625, 1626, 1627, 1628, 1629,
     1630, 1619, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
     1649, 1653, 1589, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1669, 1661, 1670,
     1671, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,

     1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1693,
     1694, 1695, 1696, 1697, 1699, 1701, 1703, 1704, 1706, 1707,
     1708, 1709, 1710, 1711, 1713, 1714, 1716, 1718, 1719, 1720,
     1721, 1722, 1723, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
     1732, 1733, 1734, 1735, 1736, 1737, 1738, 1729, 1739, 1740,
     1742, 1743, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1740,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
     1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1774,
     1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1787, 1788, 1790, 1782, 1791, 1792, 1795, 1796,

     1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1811, 1812, 1814, 1815, 1816, 1817,
     1818, 1820, 1822, 1824, 1825, 1827, 1828, 1829, 1830, 1831,
     1832, 1834, 1835, 1837, 1839, 1840, 1842, 1844, 1845, 1846,
     1848, 1850, 1851, 1852, 1855, 1858, 1860, 1858, 1861, 1862,
     1858, 1863, 1864, 1865, 1855, 1866, 1867, 1868, 1869, 1870,
     1871, 1872, 1873, 1874, 1875, 1876, 1877, 1879, 1880, 1881,
     1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891,
     1892, 1893, 1895, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
     1904, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1917,

     1918, 1920, 1921, 1922, 1924, 1925, 1926, 1927, 1928, 1929,
     1930, 1844, 1931, 1932, 1933, 1935, 1936, 1940, 1943, 1946,
     1948, 1952, 1953, 1955, 1956, 1957, 1958, 1959, 1963, 1965,
     1963, 1966, 1967, 1963, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1984,
     1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
     1995, 1996, 1997, 1998, 2000, 2002, 2003, 2004, 2005, 2006,
     2007, 2008, 2009, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
     2018, 2022, 2023, 2025, 2026, 2027, 2029, 2030, 2031, 2032,
     2033, 2034, 2035, 2036, 2037, 2038, 2040, 2041, 2045, 2048,

     2051, 2053, 2057, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
     2066, 2067, 2068, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
     2077, 2078, 2079, 2082, 2084, 2085, 2086, 2087, 2089, 2090,
     2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
     2101, 2102, 2103, 2104, 2105, 2106, 2107, 2109, 2110, 2111,
     2112, 2111, 2113, 2114, 2115, 2117, 2118, 2119, 2121, 2122,
     2123, 2124, 2125, 2126, 2127, 2128, 2130, 2133, 2137, 2138,
     2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
     2149, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
     2160, 2163, 2165, 2166, 2167, 2168, 2170, 2171, 2172, 2173,

     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2187, 2188, 2190, 2191, 2192, 2193, 2192,
     2194, 2195, 2196, 2198, 2199, 2200, 2202, 2203, 2204, 2205,
     2206, 2207, 2208, 2209, 2211, 2214, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2231, 2232, 2233, 2234,
     2234, 2234, 2235, 2234, 2234, 2236, 2237, 2238, 2239, 2240,
     2241, 2244, 2247, 2248, 2249, 2251, 2252, 2253, 2234, 2254,
     2255, 2256, 2257, 2240, 2259, 2260, 2262, 2263, 2240, 2265,
     2240, 2266, 2267, 2268, 2269, 2270, 2272, 2273, 2274, 2276,
     2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288,

     2289, 2291, 2292, 2293, 2294, 2295, 2299, 2300, 2301, 2302,
     2302, 2302, 2303, 2302, 2302, 2304, 2305, 2306, 2307, 2308,
     2309, 2312, 2315, 2316, 2317, 2319, 2320, 2321, 2302, 2322,
     2323, 2324, 2325, 2308, 2327, 2328, 2330, 2331, 2308, 2333,
     2308, 2334, 2335, 2336, 2337, 2338, 2340, 2341, 2342, 2344,
     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2357, 2358, 2361, 2362, 2364, 2365, 2367, 2368, 2367, 2369,
     2357, 2370, 2371, 2368, 2372, 2371, 2376, 2378, 2371, 2379,
     2380, 2381, 2383, 2384, 2372, 2385, 2386, 2387, 2388, 2389,
     2390, 2391, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400,

     2401, 2403, 2404, 2405, 2406, 2407, 2409, 2410, 2411, 2412,
     2414, 2415, 2416, 2418, 2419, 2420, 2421, 2424, 2425, 2427,
     2428, 2427, 2429, 2430, 2431, 2432, 2428, 2431, 2436, 2438,
     2431, 2439, 2440, 2441, 2443, 2432, 2444, 2445, 2446, 2447,
     2448, 2449, 2450, 2451, 2453, 2454, 2455, 2456, 2457, 2458,
     2459, 2460, 2461, 2463, 2464, 2465, 2466, 2467, 2469, 2470,
     2471, 2472, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2482,
     2483, 2484, 2485, 2486, 2487, 2488, 2478, 2489, 2479, 2490,
     2492, 2493, 2494, 2495, 2496, 2479, 2479, 2479, 2479, 2479,
     2479, 2479, 2479, 2479, 2479, 2491, 2497, 2498, 2499, 2500,

     2501, 2502, 2505, 2506, 2507, 2491, 2508, 2509, 2510, 2511,
     2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2523, 2524,
     2525, 2528, 2529, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
     2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547,
     2548, 2549, 2550, 2551, 2552, 2543, 2553, 2554, 2557, 2558,
     2559, 2560, 2561, 2562, 2563, 2565, 2566, 2567, 2568, 2569,
     2570, 2571, 2572, 2575, 2576, 2577, 2580, 2581, 2584, 2585,
     2585, 2585, 2588, 2589, 2590, 2592, 2593, 2594, 2595, 2584,
     2596, 2597, 2598, 2599, 2600, 2601, 2602, 2605, 2606, 2607,
     2608, 2611, 2612, 2613, 2614, 2615, 2602, 2616, 2618, 2620,

     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2631,
     2632, 2633, 2634, 2635, 2637, 2638, 2639, 2640, 2641, 2642,
     2643, 2644, 2645, 2646, 2585, 2586, 2650, 2586, 2651, 2652,
     2653, 2656, 2647, 2657, 2586, 2586, 2586, 2586, 2586, 2586,
     2586, 2586, 2647, 2658, 2659, 2660, 2661, 2663, 2665, 2666,
     2586, 2667, 2668, 2669, 2670, 2671, 2672, 2586, 2586, 2586,
     2673, 2674, 2679, 2676, 2676, 2676, 2691, 2586, 2692, 2586,
     2694, 2680, 2681, 2681, 2681, 2695, 2586, 2682, 2682, 2696,
     2698, 2699, 2700, 2586, 2586, 2701, 2586, 2702, 2703, 2704,
     2680, 2705, 2706, 2707, 2708, 2586, 2709, 2680, 2586, 2587,

     2710, 2587, 2711, 2712, 2711, 2712, 2712, 2713, 2587, 2587,
     2587, 2587, 2587, 2587, 2587, 2587, 2587, 2587, 2676, 2680,
     2714, 2684, 2715, 2716, 2717, 2718, 2721, 2681, 2722, 2723,
     2724, 2587, 2587, 2587, 2683, 2725, 2726, 2728, 2729, 2730,
     2732, 2587, 2683, 2733, 2683, 2734, 2736, 2683, 2737, 2683,
     2738, 2684, 2684, 2684, 2685, 2739, 2740, 2587, 2587, 2741,
     2587, 2684, 2742, 2743, 2683, 2683, 2683, 2744, 2745, 2587,
     2746, 2747, 2748, 2749, 2683, 2749, 2751, 2684, 2684, 2750,
     2684, 2750, 2750, 2752, 2685, 2685, 2685, 2753, 2754, 2684,
     2683, 2683, 2755, 2683, 2685, 2756, 2759, 2760, 2761, 2762,

     2763, 2764, 2683, 2768, 2688, 2771, 2772, 2765, 2765, 2765,
     2685, 2685, 2688, 2685, 2688, 2773, 2770, 2688, 2689, 2688,
     2770, 2776, 2685, 2686, 2686, 2686, 2686, 2686, 2686, 2686,
     2686, 2686, 2686, 2775, 2688, 2688, 2688, 2775, 2686, 2686,
     2686, 2686, 2686, 2686, 2688, 2777, 2778, 2779, 2689, 2689,
     2689, 2690, 2780, 2781, 2782, 2783, 2785, 2786, 2689, 2787,
     2688, 2688, 2765, 2688, 2686, 2686, 2686, 2686, 2686, 2686,
     2788, 2769, 2688, 2789, 2689, 2689, 2790, 2689, 2769, 2769,
     2792, 2690, 2690, 2690, 2793, 2794, 2689, 2795, 2797, 2798,
     2799, 2690, 2800, 2801, 2802, 2803, 2805, 2806, 2807, 2808,

     2809, 2769, 2769, 2769, 2810, 2811, 2814, 2690, 2690, 2816,
     2690, 2769, 2817, 2818, 2819, 2821, 2822, 2823, 2824, 2690,
     2825, 2826, 2828, 2829, 2830, 2831, 2833, 2769, 2769, 2834,
     2769, 2835, 2836, 2837, 2838, 2839, 2841, 2842, 2843, 2769,
     2774, 2844, 2845, 2846, 2847, 2853, 2851, 2858, 2860, 2774,
     2774, 2774, 2774, 2774, 2774, 2774, 2774, 2774, 2774, 2861,
     2863, 2865, 2866, 2867, 2774, 2774, 2774, 2774, 2774, 2774,
     2869, 2870, 2774, 2774, 2774, 2871, 2851, 2851, 2851, 2872,
     2874, 2875, 2774, 2875, 2876, 2877, 2851, 2877, 2878, 2852,
     2774, 2774, 2774, 2774, 2774, 2774, 2850, 2879, 2774, 2774,

     2880, 2774, 2851, 2851, 2850, 2851, 2850, 2881, 2882, 2850,
     2774, 2850, 2884, 2886, 2851, 2887, 2888, 2889, 2890, 2852,
     2852, 2852, 2892, 2894, 2895, 2896, 2850, 2850, 2850, 2852,
     2898, 2899, 2900, 2901, 2903, 2856, 2850, 2904, 2905, 2904,
     2906, 2855, 2906, 2907, 2908, 2852, 2852, 2909, 2852, 2855,
     2910, 2855, 2850, 2850, 2855, 2850, 2855, 2852, 2911, 2913,
     2915, 2916, 2918, 2919, 2850, 2856, 2856, 2856, 2920, 2922,
     2923, 2855, 2855, 2855, 2857, 2856, 2917, 2924, 2921, 2925,
     2917, 2855, 2921, 2926, 2927, 2931, 2933, 2934, 2935, 2936,
     2937, 2856, 2856, 2938, 2856, 2939, 2940, 2855, 2855, 2941,

     2855, 2942, 2943, 2856, 2857, 2857, 2857, 2944, 2945, 2855,
     2946, 2949, 2951, 2952, 2857, 2956, 2958, 2959, 2960, 2961,
     2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971,
     2857, 2857, 2974, 2857, 2975, 2976, 2978, 2979, 2981, 2982,
     2983, 2985, 2857, 2986, 2988, 2989, 2990, 2991, 2992, 2993,
     2994, 2996, 2997, 2999, 3000, 3001, 3003, 3004, 3006, 3007,
     3008, 3009, 3010, 3011, 3012, 3014, 3015, 3016, 3017, 3018,
     3019, 3020, 3021, 3022, 3024, 3025, 3026, 3028, 3029, 3030,
     3031, 3032, 3033, 3034, 3035, 3036, 3038, 3039, 3040, 3041,
     3042, 3044, 3046, 3047, 3048, 3049, 3051, 3052, 3053, 3054,

     3056, 3058, 3059, 3060, 3061, 3063, 3064, 3065, 3066, 3067,
     3068, 3069, 3071, 3072, 3074, 3075, 3076, 3077, 3078, 3080,
     3081, 3082, 3084, 3085, 3086, 3087, 3088, 3089, 3091, 3092,
     3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102,
     3104, 3105, 3106, 3107, 3108, 3110, 3111, 3112, 3113, 3116,
     3117, 3118, 3121, 3122, 3125, 3128, 3129, 3130, 3131, 3132,
     3133, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138, 3138,
     3138, 3138, 3138, 3139, 3139, 3139, 3139, 3139, 3139, 3139,
     3139, 3139, 3139, 3139, 3139, 3140, 3140, 3140, 3140, 3140,
     3140, 3140, 3140, 3140, 3140, 3140, 3140, 3141, 3141, 3141,

     3141, 3141, 3141, 3141, 3141, 3141, 3141, 3141, 3141, 3142,
     3142, 3142, 3142, 3142, 3142, 3142, 3142, 3142, 3142, 3142,
     3142, 3143, 3143, 3143, 3143, 3143, 3143, 3143, 3143, 3143,
     3143, 3143, 3143, 3144, 3144, 3144, 3144, 3144, 3144, 3144,
     3144, 3144, 3144, 3144, 3144, 3145, 3145, 3145, 3145, 3145,
     3145, 3145, 3145, 3145, 3145, 3145, 3145, 3146, 3146, 3146,
     3146, 3146, 3146, 3146, 3146, 3146, 3146, 3146, 3146, 3147,
     3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147, 3147,
     3147, 3148, 3148, 3148, 3148, 3148, 3148, 3148, 3148, 3148,
     3148, 3148, 3148, 3149, 3149, 3149, 3149, 3149, 3149, 3149,

     3149, 3149, 3149, 3149, 3149, 3150, 3150, 3150, 3150, 3150,
     3150, 3150, 3150, 3150, 3150, 3150, 3150, 3151, 3151, 3151,
     3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151, 3151, 3152,
     3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152, 3152,
     3152, 3153,  911, 3153, 3153, 3153, 3153, 3153, 3153, 3153,
     3153, 3153, 3153, 3154,  910, 3154, 3154, 3154, 3154, 3154,
     3154, 3154, 3154, 3154, 3154, 3155,  909,  904,  900, 3155,
     3155, 3155, 3155, 3156,  899, 3156,  898, 3156, 3156, 3156,
     3156, 3156, 3156, 3156, 3156, 3157,  896, 3157, 3157,  895,
     3157, 3157, 3157, 3157, 3157, 3157, 3157, 3158,  894, 3158,

     3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3158, 3159,
      893, 3159, 3159, 3159, 3159, 3159, 3159, 3159, 3159, 3159,
     3159, 3160,  892, 3160, 3160, 3160, 3160, 3160, 3160, 3160,
     3160, 3160, 3160, 3161,  891, 3161, 3161,  890, 3161, 3161,
     3161, 3161, 3161, 3161, 3161, 3162, 3162, 3162, 3162, 3162,
     3162, 3162, 3162, 3162, 3162, 3162, 3163,  889, 3163, 3163,
     3163, 3163, 3163, 3163, 3163, 3163, 3164,  887,  886,  885,
     3164, 3164, 3164, 3164, 3165,  883,  882,  881, 3165, 3165,
     3165, 3165, 3166, 3166, 3166, 3166, 3166, 3166, 3166, 3166,
     3166, 3166, 3166, 3166, 3167, 3167, 3168, 3168, 3169,  880,

     3169, 3169,  878, 3169, 3169, 3169, 3169, 3169, 3169, 3169,
     3170,  877, 3170, 3170, 3170, 3170, 3170, 3170, 3170, 3170,
     3170, 3170, 3171,  875, 3171, 3171, 3171, 3171, 3171, 3171,
     3171, 3171, 3171, 3171, 3172,  874, 3172, 3172, 3172, 3172,
     3172, 3172, 3172, 3172, 3172, 3172, 3173, 3173, 3173, 3173,
     3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3174, 3174,
     3174, 3174, 3174, 3174, 3174, 3174, 3174, 3174, 3174, 3174,
     3175,  873, 3175, 3175,  872, 3175, 3175, 3175, 3175, 3175,
     3175, 3175, 3176, 3176, 3176, 3176, 3176, 3176, 3176, 3176,
     3176, 3176, 3176, 3177,  871, 3177, 3177, 3177, 3177, 3177,

     3177, 3177, 3177, 3178,  870,  869,  868, 3178, 3178, 3178,
     3178, 3179,  867,  866,  865, 3179, 3179, 3179, 3179, 3180,
     3180, 3181, 3181, 3181, 3181, 3181, 3181, 3181, 3181, 3181,
     3181, 3181, 3181, 3182,  864, 3182, 3182, 3182, 3182, 3182,
     3182, 3182, 3182, 3182, 3182, 3183,  863, 3183, 3183, 3183,
     3183, 3183, 3184,  862,  861, 3184, 3184, 3184, 3185,  860,
      859, 3185, 3185, 3185, 3186, 3186,  858, 3186, 3187,  856,
     3187, 3187, 3187, 3187, 3187, 3187, 3187, 3187, 3187, 3187,
     3188,  854, 3188, 3188, 3188, 3188, 3188, 3188, 3188, 3188,
     3188, 3188, 3189,  853, 3189, 3189, 3189, 3189, 3189, 3189,

     3189, 3189, 3189, 3189, 3190,  852, 3190, 3190, 3190, 3190,
     3190, 3190, 3190, 3190, 3190, 3190,  851,  848,  847,  846,
      845,  844,  843,  842,  840,  838,  835,  834,  833,  832,
      831,  830,  829,  828,  827,  826,  825,  824,  823,  821,
      820,  818,  817,  816,  815,  814,  812,  811,  810,  809,
      808,  807,  806,  805,  804,  802,  801,  800,  799,  798,
      797,  796,  795,  793,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  757,  749,  741,  740,

      739,  738,  737,  735,  734,  733,  732,  731,  730,  729,
      728,  727,  726,  725,  724,  721,  720,  719,  718,  717,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  703,  702,  701,  699,  698,  697,  695,  694,
      693,  692,  691,  690,  689,  688,  687,  685,  684,  683,
      682,  681,  680,  679,  677,  676,  675,  674,  673,  672,
      669,  666,  664,  661,  660,  658,  657,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      639,  638,  634,  633,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  617,  616,  609,  608,  607,

      606,  605,  604,  603,  602,  601,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  580,  579,  578,  576,  575,  574,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  562,  561,
      560,  559,  558,  557,  556,  554,  553,  552,  551,  550,
      549,  546,  543,  541,  538,  537,  535,  534,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  510,  509,  508,
      507,  504,  501,  500,  496,  495,  481,  480,  479,  478,
      477,  470,  469,  468,  466,  464,  463,  462,  460,  459,

      457,  456,  454,  453,  450,  448,  446,  445,  444,  443,
      442,  441,  440,  437,  436,  435,  434,  432,  431,  430,
      428,  427,  426,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  413,  412,  411,  410,  409,  408,  407,
      406,  386,  385,  384,  383,  382,  381,  377,  375,  373,
      371,  363,  360,  358,  343,  342,  340,  339,  337,  336,
      335,  333,  332,  329,  327,  325,  324,  323,  322,  321,
      320,  319,  316,  315,  314,  313,  311,  310,  309,  307,
      306,  305,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  292,  291,  290,  289,  288,  287,  286,  285,

      282,  280,  278,  277,  276,  275,  273,  271,  269,  267,
      266,  265,  243,  241,  235,  229,  228,  227,  226,  225,
      206,  205,  204,  203,  199,  197,  193,  181,  177,  176,
      174,  166,  162,  160,  157,  152,  148,  142,  140,  139,
      138,  137,  136,  135,  134,  129,  127,  123,  107,  106,
      102,  101,   91,   90,   80,   76,   75,   73,   65,   60,
       57,   50,   49,   47,   37,   14,   13,    8,    7, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,

     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137,
     3137, 3137, 3137
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yyansi_c_flex_debug;
int yyansi_c_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yyansi_ctext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#line 5 "scanner.l"

/*
 * This scanner is based on:
 *
 * cpp5.l, a C/C++ scanner written by James A. Roskind.
 * "Portions Copyright (c) 1989, 1990 James A. Roskind".
 * (http://www.idiom.com/free-compilers/,
 * ftp://ftp.infoseek.com/ftp/pub/c++grammar/,
 * ftp://ftp.sra.co.jp/.a/pub/cmd/c++grammar2.0.tar.gz)
 */

#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty(int) { return 0; }
#endif

#include <util/expr.h>
#include <util/arith_tools.h>
#include <util/config.h>

#include "c_types.h"
#include "preprocessor_line.h"

#include "literals/convert_float_literal.h"
#include "literals/convert_integer_literal.h"
#include "literals/convert_character_literal.h"
#include "literals/convert_string_literal.h"

#define PARSER ansi_c_parser
#define YYSTYPE unsigned
#undef  ECHO
#define ECHO

#include "ansi_c_parser.h"
#include "ansi_c_y.tab.h"

#define loc() \
  { newstack(yyansi_clval); PARSER.set_source_location(stack(yyansi_clval)); }

int make_identifier()
{
  loc();

  // this hashes the identifier
  irep_idt base_name=yyansi_ctext;
  
  if(PARSER.cpp)
  {
    stack(yyansi_clval).id(ID_symbol);
    stack(yyansi_clval).set(ID_C_base_name, base_name);
    return TOK_IDENTIFIER;
  }
  else
  {
    std::string identifier(id2string(base_name));

    // figure out if this is a typedef or something else
    ansi_c_id_classt result=
      PARSER.lookup(identifier, PARSER.tag_following, false);

    PARSER.tag_following=false;

    stack(yyansi_clval).id(ID_symbol);
    stack(yyansi_clval).set(ID_C_base_name, base_name);
    stack(yyansi_clval).set(ID_identifier, identifier);
    stack(yyansi_clval).set(ID_C_id_class, result);

    if(result==ANSI_C_TYPEDEF)
      return TOK_TYPEDEFNAME;
    else
      return TOK_IDENTIFIER;
  }
}

int MSC_Keyword(int token)
{
  if(PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    PARSER.tag_following=false;
    return token;
  }
  else
    return make_identifier();
}

int cpp_keyword(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int MSC_cpp_keyword(int token)
{
  if(PARSER.cpp && PARSER.mode==ansi_c_parsert::MSC)
  {
    loc();
    return token;
  }
  else
    return make_identifier();
}

int cpp_operator(int token)
{
  if(PARSER.cpp)
  {
    loc();
    return token;
  }
  else
  {
    yyansi_cerror("C++ operator not allowed in C mode");
    return TOK_SCANNER_ERROR;
  }
}

/*** macros for easier rule definition **********************************/

















#line 198 "scanner.l"
void ansi_c_scanner_init()
{
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 2819 "ansi_c_lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT1 2
#define COMMENT2 3
#define STRING_LITERAL 4
#define STRING_LITERAL_COMMENT 5
#define ASM_BLOCK 6
#define MSC_ASM 7
#define IGNORE_PARENS 8
#define MSC_PRAGMA 9
#define MSC_ANNOTATION 10
#define GCC_ATTRIBUTE1 11
#define GCC_ATTRIBUTE2 12
#define GCC_ATTRIBUTE3 13
#define GCC_ATTRIBUTE4 14
#define GCC_ATTRIBUTE5 15
#define GCC_ASM 16
#define GCC_ASM_PAREN 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yyansi_clex_destroy (void );

int yyansi_cget_debug (void );

void yyansi_cset_debug (int debug_flag  );

YY_EXTRA_TYPE yyansi_cget_extra (void );

void yyansi_cset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyansi_cget_in (void );

void yyansi_cset_in  (FILE * _in_str  );

FILE *yyansi_cget_out (void );

void yyansi_cset_out  (FILE * _out_str  );

yy_size_t yyansi_cget_leng (void );

char *yyansi_cget_text (void );

int yyansi_cget_lineno (void );

void yyansi_cset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yyansi_cwrap (void );
#else
extern int yyansi_cwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yyansi_ctext, yyansi_cleng, 1, yyansi_cout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyansi_cin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyansi_cin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyansi_cin))==0 && ferror(yyansi_cin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyansi_cin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yyansi_clex (void);

#define YY_DECL int yyansi_clex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yyansi_ctext and yyansi_cleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyansi_cin )
			yyansi_cin = stdin;

		if ( ! yyansi_cout )
			yyansi_cout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyansi_censure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
		}

		yyansi_c_load_buffer_state( );
		}

	{
#line 205 "scanner.l"


#line 3055 "ansi_c_lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yyansi_ctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3138 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5070 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 207 "scanner.l"
{ BEGIN(GRAMMAR);
		  yyless(0);		/* start again with this character */
		 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 211 "scanner.l"
{ BEGIN(COMMENT1); } /* begin C comment state */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 214 "scanner.l"
{ BEGIN(GRAMMAR); } /* end comment state, back to GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 215 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT1):
#line 216 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 217 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 218 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 219 "scanner.l"
{ }
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 223 "scanner.l"
{ BEGIN(STRING_LITERAL); } /* end comment state, back to STRING_LITERAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 224 "scanner.l"
{ yyansi_cerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(STRING_LITERAL_COMMENT):
#line 225 "scanner.l"
{ yyansi_cerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 226 "scanner.l"
{ /* ignore every char except '*' and NL (performance!) */ }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 227 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 228 "scanner.l"
{ }
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 231 "scanner.l"
{ BEGIN(COMMENT2); }	/* begin C++ comment state */
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 234 "scanner.l"
{ BEGIN(GRAMMAR); }	/* end comment state, back GRAMMAR */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 235 "scanner.l"
{ } /* all characters within comments are ignored */
	YY_BREAK

case 16:
YY_RULE_SETUP
#line 238 "scanner.l"
{
                  newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_character_literal(yyansi_ctext, true);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_CHARACTER;
                }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 245 "scanner.l"
{
                  PARSER.string_literal.clear();
                  PARSER.string_literal.append(yyansi_ctext);
                  newstack(yyansi_clval);
                  PARSER.set_source_location(stack(yyansi_clval));
                  // String literals can be continued in
                  // the next line
                  BEGIN(STRING_LITERAL);
                }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 255 "scanner.l"
{ PARSER.string_literal.append(yyansi_ctext); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 256 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 257 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 258 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER);
                  PARSER.set_line_no(PARSER.get_line_no()-1);
		 }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 262 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 263 "scanner.l"
{ BEGIN(STRING_LITERAL_COMMENT); /* C comment, ignore */ }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 264 "scanner.l"
{ /* C++ comment, ignore */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 265 "scanner.l"
{ // anything else: back to normal
                  source_locationt l=stack(yyansi_clval).source_location();
                  stack(yyansi_clval)=convert_string_literal(PARSER.string_literal);
                  stack(yyansi_clval).add_source_location().swap(l);
                  BEGIN(GRAMMAR); // back to normal
                  yyless(0); // put back
                  return TOK_STRING;
                }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 274 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 275 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 277 "scanner.l"
{
                  preprocessor_line(yyansi_ctext, PARSER);
                  PARSER.set_line_no(PARSER.get_line_no()-1);
		 }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 282 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   std::string tmp(yyansi_ctext);
                   std::size_t p=tmp.find('(')+1;
                   std::string value=std::string(tmp, p, tmp.rfind(')')-p);
                   exprt l=convert_integer_literal(value);
                   to_integer(l, PARSER.pragma_pack);
                   // needs push, pop
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
		 }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 293 "scanner.l"
{
                   // Done by Visual Studio and gcc
                   // should be equivalent to pop-all
                   PARSER.pragma_pack=0;
                   // needs push, pop
                   // http://msdn.microsoft.com/en-us/library/2e70t5y1%28v=vs.80%29.aspx
		 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 301 "scanner.l"
{
                   // silently ignore other pragmas
		 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 305 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 306 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 307 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 309 "scanner.l"
{
		  yyansi_cerror("Preprocessor directive found");
		  return TOK_SCANNER_ERROR;
		 }
	YY_BREAK

/*** keywords ***/


case 36:
YY_RULE_SETUP
#line 319 "scanner.l"
{ loc(); return TOK_AUTO; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 320 "scanner.l"
{ if(PARSER.cpp)
                    return make_identifier();
                  else
                  { loc(); return TOK_BOOL; }
                }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 325 "scanner.l"
{ loc(); return TOK_BREAK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 326 "scanner.l"
{ loc(); return TOK_CASE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 327 "scanner.l"
{ loc(); return TOK_CHAR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 328 "scanner.l"
{ loc(); return TOK_COMPLEX; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 329 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 330 "scanner.l"
{ loc(); return TOK_CONTINUE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 331 "scanner.l"
{ loc(); return TOK_DEFAULT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 332 "scanner.l"
{ loc(); return TOK_DO; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 333 "scanner.l"
{ loc(); return TOK_DOUBLE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 334 "scanner.l"
{ loc(); return TOK_ELSE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 335 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_ENUM; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 336 "scanner.l"
{ loc(); return TOK_EXTERN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 337 "scanner.l"
{ loc(); return TOK_FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 338 "scanner.l"
{ loc(); return TOK_FOR; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 339 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 340 "scanner.l"
{ loc(); return TOK_IF; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 341 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 342 "scanner.l"
{ loc(); return TOK_INT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 343 "scanner.l"
{ loc(); return TOK_LONG; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 344 "scanner.l"
{ loc(); return TOK_REGISTER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 345 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 346 "scanner.l"
{ loc(); return TOK_RETURN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 347 "scanner.l"
{ loc(); return TOK_SHORT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 348 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 349 "scanner.l"
{ loc(); return TOK_SIZEOF; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 350 "scanner.l"
{ loc(); return TOK_STATIC; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 351 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_STRUCT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 352 "scanner.l"
{ loc(); return TOK_SWITCH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 353 "scanner.l"
{ loc(); return TOK_TYPEDEF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 354 "scanner.l"
{ loc(); PARSER.tag_following=true; return TOK_UNION; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 355 "scanner.l"
{ loc(); return TOK_UNSIGNED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 356 "scanner.l"
{ loc(); return TOK_VOID; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 357 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 358 "scanner.l"
{ loc(); return TOK_WHILE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 360 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC && !PARSER.cpp)
                    { loc(); return TOK_GCC_AUTO_TYPE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 366 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_FLOAT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 372 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_INT128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 378 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL32; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 384 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 390 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC)
                    { loc(); return TOK_GCC_DECIMAL128; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 396 "scanner.l"
{ return MSC_Keyword(TOK_INT8); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 397 "scanner.l"
{ return MSC_Keyword(TOK_INT16); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 398 "scanner.l"
{ return MSC_Keyword(TOK_INT32); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 400 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM ||
                     PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_INT64; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 407 "scanner.l"
{ return MSC_Keyword(TOK_PTR32); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 408 "scanner.l"
{ return MSC_Keyword(TOK_PTR64); }
	YY_BREAK

/*
"__stdcall"     { return MSC_Keyword(TOK_STDCALL); }
"__fastcall"    { return MSC_Keyword(TOK_FASTCALL); }
"__clrcall"     { return MSC_Keyword(TOK_CLRCALL); }
*/

case 84:
#line 419 "scanner.l"
case 85:
YY_RULE_SETUP
#line 419 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_COMPLEX; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 86:
#line 427 "scanner.l"
case 87:
YY_RULE_SETUP
#line 427 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_REAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 88:
#line 435 "scanner.l"
case 89:
YY_RULE_SETUP
#line 435 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_IMAG; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* note: "wchar_t" should be in the list above, but it is left out */
/*       because it is a 'typedef' in some standard header files   */

case 90:
YY_RULE_SETUP
#line 447 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::CW)
                    { loc(); return TOK_CW_VAR_ARG_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 453 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                        PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_BUILTIN_VA_ARG; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 92:
#line 461 "scanner.l"
case 93:
#line 462 "scanner.l"
case 94:
YY_RULE_SETUP
#line 462 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_OFFSETOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 469 "scanner.l"
{
                  if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_BUILTIN_TYPES_COMPATIBLE_P; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 477 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 484 "scanner.l"
{ // MS supports __alignof:
                  // http://msdn.microsoft.com/en-us/library/45t0s5f4%28v=vs.71%29.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 494 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 500 "scanner.l"
{
                  // interestingly, gcc doesn't support this,
                  // but Visual Studio does!
                  if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 510 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    loc();
                    BEGIN(MSC_ASM);
                    return TOK_MSC_ASM;
                  }
                  else if(PARSER.cpp)
                  {
                    loc();
                    return TOK_GCC_ASM;
                  }
                  else
                    BEGIN(GCC_ASM);
                }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 525 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW)
                  {
                    if(PARSER.cpp)
                    {
                      loc();
                      return TOK_GCC_ASM;
                    }
                    else
                      BEGIN(GCC_ASM);
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 540 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    if(PARSER.cpp)
                    {
                      loc();
                      return TOK_GCC_ASM;
                    }
                    else
                      BEGIN(GCC_ASM);
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 556 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_BASED; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 562 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { /* ignore for now */ }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 568 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)  
                    { loc(); return TOK_WCHAR_T; }  
                  else
                    return make_identifier();
                }                                                                          
	YY_BREAK

/* C++ Keywords and Operators */

case 106:
YY_RULE_SETUP
#line 578 "scanner.l"
{ return cpp_keyword(TOK_BOOL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 579 "scanner.l"
{ return cpp_keyword(TOK_CATCH); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 580 "scanner.l"
{ return cpp_keyword(TOK_CLASS); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 581 "scanner.l"
{ return cpp_keyword(TOK_CONSTEXPR); } // C++11
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 582 "scanner.l"
{ return cpp_keyword(TOK_DELETE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 583 "scanner.l"
{ return cpp_keyword(TOK_DECLTYPE); } // C++11
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 584 "scanner.l"
{ return cpp_keyword(TOK_EXPLICIT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 585 "scanner.l"
{ return cpp_keyword(TOK_FRIEND); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 586 "scanner.l"
{ return cpp_keyword(TOK_MUTABLE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 587 "scanner.l"
{ return cpp_keyword(TOK_NAMESPACE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 588 "scanner.l"
{ return cpp_keyword(TOK_NEW); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 589 "scanner.l"
{ return cpp_keyword(TOK_NULLPTR); } // C++11
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 590 "scanner.l"
{ return cpp_keyword(TOK_OPERATOR); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 591 "scanner.l"
{ return cpp_keyword(TOK_PRIVATE); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 592 "scanner.l"
{ return cpp_keyword(TOK_PROTECTED); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 593 "scanner.l"
{ return cpp_keyword(TOK_PUBLIC); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 594 "scanner.l"
{ return cpp_keyword(TOK_STATIC_ASSERT); } // C++11
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 595 "scanner.l"
{ return cpp_keyword(TOK_TEMPLATE); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 596 "scanner.l"
{ return cpp_keyword(TOK_THIS); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 597 "scanner.l"
{ return cpp_keyword(TOK_THREAD_LOCAL); } // C++11
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 598 "scanner.l"
{ return cpp_keyword(TOK_THROW); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 599 "scanner.l"
{ return cpp_keyword(TOK_TYPEID); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 600 "scanner.l"
{ return cpp_keyword(TOK_TYPENAME); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 601 "scanner.l"
{ return cpp_keyword(TOK_USING); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 602 "scanner.l"
{ return cpp_keyword(TOK_VIRTUAL); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 603 "scanner.l"
{ // CodeWarrior doesn't have wchar_t built in,
                      // and in MSC, there is a command-line option to turn it off
                      if(PARSER.mode==ansi_c_parsert::CW)
                        return make_identifier();
                      else
                        return cpp_keyword(TOK_WCHAR_T);
                    }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 610 "scanner.l"
{ return cpp_operator(TOK_DOTPM); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 611 "scanner.l"
{ return cpp_operator(TOK_ARROWPM); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 612 "scanner.l"
{ if(PARSER.cpp)
                        return cpp_operator(TOK_SCOPE);
                      else
                      {
                        yyless(1); // puts all but one : back into stream
                        loc();
                        PARSER.tag_following=false;
                        return ':';
                      }
                    }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 623 "scanner.l"
{ if(PARSER.cpp && PARSER.mode==ansi_c_parsert::GCC)
                        return cpp_keyword(TOK_DECLTYPE);
                      else
                        return make_identifier();
                    }
	YY_BREAK

/* a huge batch of MS C++ extensions
   http://msdn.microsoft.com/en-us/library/ms177194(v=vs.80).aspx */

case 136:
YY_RULE_SETUP
#line 634 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 635 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 636 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 637 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 638 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 639 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 640 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 641 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 642 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 643 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 644 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 645 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 646 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 647 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 648 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 649 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_BINARY_TYPE_PREDICATE); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 650 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 651 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 652 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 653 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 654 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 655 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 656 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 657 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 658 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 659 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 660 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 661 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNARY_TYPE_PREDICATE); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 663 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_EXISTS); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 664 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_IF_NOT_EXISTS); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 665 "scanner.l"
{ loc(); return MSC_cpp_keyword(TOK_MSC_UNDERLYING_TYPE); }
	YY_BREAK
case 167:
#line 668 "scanner.l"
case 168:
#line 669 "scanner.l"
case 169:
#line 670 "scanner.l"
case 170:
#line 671 "scanner.l"
case 171:
#line 672 "scanner.l"
case 172:
#line 673 "scanner.l"
case 173:
#line 674 "scanner.l"
case 174:
#line 675 "scanner.l"
case 175:
#line 676 "scanner.l"
case 176:
#line 677 "scanner.l"
case 177:
YY_RULE_SETUP
#line 677 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
	             BEGIN(MSC_ANNOTATION);
                   else
	           {
	             yyless(1); // puts all but [ back into stream
	             loc();
	             PARSER.tag_following=false;
	             return yyansi_ctext[0]; // returns the [
	           }
                 }
	YY_BREAK
case 178:
#line 689 "scanner.l"
case 179:
YY_RULE_SETUP
#line 689 "scanner.l"
{ if(PARSER.cpp)
                  {
                    BEGIN(IGNORE_PARENS);
                  }
                  else if(PARSER.mode==ansi_c_parsert::MSC ||
                          PARSER.mode==ansi_c_parsert::CW ||
                          PARSER.mode==ansi_c_parsert::ARM)
                  {
                    loc(); return TOK_MSC_DECLSPEC;
                  }
                  else if(PARSER.mode==ansi_c_parsert::GCC)
                  {
                    // GCC supports this on Windows as an exception!
                    // Should likely reject on other targets.
                    loc(); return TOK_MSC_DECLSPEC;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 709 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                  {
                    BEGIN(MSC_PRAGMA);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 181:
#line 719 "scanner.l"
case 182:
YY_RULE_SETUP
#line 719 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                  {
                    #if 1
                    if(PARSER.cpp)
                      BEGIN(IGNORE_PARENS);
                    else
                      BEGIN(GCC_ATTRIBUTE1);
                    #else
                    loc(); return TOK_GCC_ATTRIBUTE;
                    #endif
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 736 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 737 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 739 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 741 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 742 "scanner.l"
{ loc(); return TOK_RESTRICT; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 744 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 745 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 746 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 747 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 748 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 749 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 750 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 751 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 752 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 753 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 754 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 756 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 757 "scanner.l"
{ loc(); return TOK_CONST; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 759 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 760 "scanner.l"
{ loc(); return TOK_SIGNED; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 762 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 763 "scanner.l"
{ loc(); return TOK_VOLATILE; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 765 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 774 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 784 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 794 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 803 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 812 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 821 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 830 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 839 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 848 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 858 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 868 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 878 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    BEGIN(IGNORE_PARENS);
                    PARSER.parenthesis_counter=0;
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 888 "scanner.l"
{ /* an ARM extension */
                  if(PARSER.mode==ansi_c_parsert::ARM)
                  {
                    // ignore
                  }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 897 "scanner.l"
{ if(PARSER.cpp ||
                     PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::CW ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 906 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ICC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_TYPEOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 914 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 916 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 923 "scanner.l"
{ // http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx
                  if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_INLINE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 930 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 931 "scanner.l"
{ loc(); return TOK_INLINE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 933 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_GCC_LABEL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 940 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 946 "scanner.l"
{ if(PARSER.cpp) // C++?
                    { loc(); return TOK_TRY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 952 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_FINALLY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 958 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_EXCEPT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 964 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::MSC)
                    { loc(); return TOK_MSC_LEAVE; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 970 "scanner.l"
{ loc(); return TOK_CPROVER_ATOMIC; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 971 "scanner.l"
{ loc(); return TOK_FORALL; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 972 "scanner.l"
{ loc(); return TOK_EXISTS; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 973 "scanner.l"
{ loc(); return TOK_ARRAY_OF; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 974 "scanner.l"
{ loc(); return TOK_THREAD_LOCAL; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 975 "scanner.l"
{ loc(); return TOK_CPROVER_BITVECTOR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 976 "scanner.l"
{ loc(); return TOK_CPROVER_FLOATBV; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 977 "scanner.l"
{ loc(); return TOK_CPROVER_FIXEDBV; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 978 "scanner.l"
{ loc(); return TOK_CPROVER_BOOL; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 979 "scanner.l"
{ loc(); return TOK_CPROVER_THROW; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 980 "scanner.l"
{ loc(); return TOK_CPROVER_CATCH; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 981 "scanner.l"
{ loc(); return TOK_CPROVER_TRY; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 982 "scanner.l"
{ loc(); return TOK_CPROVER_FINALLY; }
	YY_BREAK
case 245:
#line 985 "scanner.l"
case 246:
YY_RULE_SETUP
#line 985 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_FORALL;
                }
	YY_BREAK
case 247:
#line 990 "scanner.l"
case 248:
YY_RULE_SETUP
#line 990 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ACSL_EXISTS;
                }
	YY_BREAK
case 249:
#line 994 "scanner.l"
case 250:
YY_RULE_SETUP
#line 994 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_IMPLIES;
                }
	YY_BREAK
case 251:
#line 999 "scanner.l"
case 252:
YY_RULE_SETUP
#line 999 "scanner.l"
{ /* Non-standard, obviously. Found in Spec# and ACSL syntax. */
                  loc(); return TOK_EQUIVALENT;
                }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 1003 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_GE;
                }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1007 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_LE;
                }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1011 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_ANDAND;
                }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 1015 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_OROR;
                }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 1019 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_TRUE;
                }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 1023 "scanner.l"
{ /* Non-standard, obviously. Found in ACSL syntax. */
                  loc(); return TOK_FALSE;
                }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1027 "scanner.l"
{ if(PARSER.mode==ansi_c_parsert::GCC ||
                     PARSER.mode==ansi_c_parsert::ARM)
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 260:
YY_RULE_SETUP
#line 1036 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ALIGNAS; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 261:
YY_RULE_SETUP
#line 1046 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ALIGNOF; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword. It can be used as a type qualifier
     and as a type specifier, which introduces ambiguity into the grammar.
     We thus have two different tokens.
     
     6.7.2.4 - 4: If the _Atomic keyword is immediately followed by a left
     parenthesis, it is interpreted as a type specifier (with a type name),
     not as a type qualifier.  
   */
case 262:
YY_RULE_SETUP
#line 1063 "scanner.l"
{ // put back all but _Atomic
                   yyless(7);

                   if(!PARSER.cpp &&
                      (PARSER.mode==ansi_c_parsert::GCC ||
                       PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ATOMIC_TYPE_SPECIFIER; }
                  else
                    return make_identifier();
                }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 1074 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_ATOMIC_TYPE_QUALIFIER; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 264:
YY_RULE_SETUP
#line 1084 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_GENERIC; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 265:
YY_RULE_SETUP
#line 1094 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_IMAGINARY; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 266:
YY_RULE_SETUP
#line 1104 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_NORETURN; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 267:
YY_RULE_SETUP
#line 1114 "scanner.l"
{ if(!PARSER.cpp &&
                      (PARSER.mode==ansi_c_parsert::GCC ||
                       PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_STATIC_ASSERT; }
                  else
                    return make_identifier();
                }
	YY_BREAK
/* This is a C11 keyword */
case 268:
YY_RULE_SETUP
#line 1124 "scanner.l"
{ if(!PARSER.cpp &&
                     (PARSER.mode==ansi_c_parsert::GCC ||
                      PARSER.mode==ansi_c_parsert::ARM))
                    { loc(); return TOK_THREAD_LOCAL; }
                  else
                    return make_identifier();
                }
	YY_BREAK

/* operators following */

case 269:
YY_RULE_SETUP
#line 1137 "scanner.l"
{ loc(); return TOK_ARROW; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 1138 "scanner.l"
{ loc(); return TOK_INCR; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 1139 "scanner.l"
{ loc(); return TOK_DECR; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 1140 "scanner.l"
{ loc(); return TOK_SHIFTLEFT; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 1141 "scanner.l"
{ loc(); return TOK_SHIFTRIGHT; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 1142 "scanner.l"
{ loc(); return TOK_LE; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 1143 "scanner.l"
{ loc(); return TOK_GE; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 1144 "scanner.l"
{ loc(); return TOK_EQ; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 1145 "scanner.l"
{ loc(); return TOK_NE; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 1146 "scanner.l"
{ loc(); return TOK_ANDAND; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 1147 "scanner.l"
{ loc(); return TOK_OROR; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 1148 "scanner.l"
{ loc(); return TOK_ELLIPSIS; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 1150 "scanner.l"
{ loc(); return TOK_MULTASSIGN; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 1151 "scanner.l"
{ loc(); return TOK_DIVASSIGN; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 1152 "scanner.l"
{ loc(); return TOK_MODASSIGN; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 1153 "scanner.l"
{ loc(); return TOK_PLUSASSIGN; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 1154 "scanner.l"
{ loc(); return TOK_MINUSASSIGN; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 1155 "scanner.l"
{ loc(); return TOK_SHLASSIGN; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 1156 "scanner.l"
{ loc(); return TOK_SHRASSIGN; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 1157 "scanner.l"
{ loc(); return TOK_ANDASSIGN; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 1158 "scanner.l"
{ loc(); return TOK_XORASSIGN; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 1159 "scanner.l"
{ loc(); return TOK_ORASSIGN; }
	YY_BREAK


case 291:
YY_RULE_SETUP
#line 1164 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 1166 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 1172 "scanner.l"
{ if(PARSER.mode!=ansi_c_parsert::GCC)
                    {
		                  yyansi_cerror("Preprocessor directive found");
		                  return TOK_SCANNER_ERROR;
                    }
                  newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 1183 "scanner.l"
{ newstack(yyansi_clval); 
                  stack(yyansi_clval)=convert_float_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
		  return TOK_FLOATING;
		}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 1189 "scanner.l"
{ 
                  PARSER.tag_following=false;
                  if(PARSER.asm_block_following) { BEGIN(ASM_BLOCK); }
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 1196 "scanner.l"
{ PARSER.asm_block_following=false;
                  PARSER.tag_following=false;
                  loc();
                  return yyansi_ctext[0];
                }
	YY_BREAK
/* This catches all one-character operators */
case 297:
YY_RULE_SETUP
#line 1203 "scanner.l"
{ loc(); PARSER.tag_following=false; return yyansi_ctext[0]; }
	YY_BREAK

case 298:
YY_RULE_SETUP
#line 1206 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 1207 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 1209 "scanner.l"
{ BEGIN(ASM_BLOCK); loc(); return '{'; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 1210 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  BEGIN(GRAMMAR);
                  return TOK_ASM_STRING;
                }
	YY_BREAK
case 302:
/* rule 302 can match eol */
YY_RULE_SETUP
#line 1217 "scanner.l"
{ loc();
                  stack(yyansi_clval).set(ID_value, yyansi_ctext);
                  stack(yyansi_clval).id(ID_string_constant);
                  return TOK_ASM_STRING; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 1221 "scanner.l"
{ PARSER.asm_block_following=false;
                  BEGIN(GRAMMAR); loc(); return '}'; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 1224 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 1227 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 1228 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 1230 "scanner.l"
{ PARSER.parenthesis_counter--;
                        if(PARSER.parenthesis_counter==0)
                          BEGIN(GRAMMAR); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 1233 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 1234 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
/* The following ugly stuff avoids two-token lookahead in the parser;
     e.g., asm void f()  vs.  asm ("xyz") or asm { ... } */

case 310:
YY_RULE_SETUP
#line 1239 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 1240 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 1241 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 1242 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 1243 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1244 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 1245 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 1246 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); return TOK_GCC_ASM_PAREN; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 1247 "scanner.l"
{ yyless(0); BEGIN(GRAMMAR); loc(); PARSER.asm_block_following=true; return TOK_GCC_ASM; }
	YY_BREAK


case 319:
#line 1252 "scanner.l"
case 320:
/* rule 320 can match eol */
YY_RULE_SETUP
#line 1252 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE2); PARSER.parenthesis_counter=0; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 1253 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 1254 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 1255 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute is following -- these may be keywords!
case 324:
#line 1261 "scanner.l"
case 325:
YY_RULE_SETUP
#line 1261 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_ALIGNED; }
	YY_BREAK
case 326:
#line 1264 "scanner.l"
case 327:
YY_RULE_SETUP
#line 1264 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_PACKED; }
	YY_BREAK
case 328:
#line 1267 "scanner.l"
case 329:
YY_RULE_SETUP
#line 1267 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_TRANSPARENT_UNION; }
	YY_BREAK
case 330:
#line 1270 "scanner.l"
case 331:
YY_RULE_SETUP
#line 1270 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_VECTOR_SIZE; }
	YY_BREAK
case 332:
#line 1273 "scanner.l"
case 333:
YY_RULE_SETUP
#line 1273 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_MODE; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 1275 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE3); loc(); return TOK_GCC_ATTRIBUTE_GNU_INLINE; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 1277 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 1278 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 1279 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE4); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 1280 "scanner.l"
{ BEGIN(GCC_ATTRIBUTE5); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 1281 "scanner.l"
{ /* ignore */ }
	YY_BREAK

// an attribute we do process
case 340:
YY_RULE_SETUP
#line 1285 "scanner.l"
{ PARSER.parenthesis_counter++; loc(); return '('; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 1286 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE5);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    PARSER.parenthesis_counter--;
                    loc();
                    return ')';
                  }
                }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 1299 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                  {
                    BEGIN(GCC_ATTRIBUTE2);
                    loc();
                    return TOK_GCC_ATTRIBUTE_END;
                  }
                  else
                  {
                    loc();
                    return ',';
                  }
                }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 1311 "scanner.l"
{ newstack(yyansi_clval);
                  stack(yyansi_clval)=convert_integer_literal(yyansi_ctext);
                  PARSER.set_source_location(stack(yyansi_clval));
                  return TOK_INTEGER;
                }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 1316 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 1317 "scanner.l"
{ /* ignore */ }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 1318 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 1319 "scanner.l"
{ loc(); return yyansi_ctext[0]; }
	YY_BREAK

// an attribute we just ignore
case 348:
YY_RULE_SETUP
#line 1323 "scanner.l"
{ PARSER.parenthesis_counter++; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 1324 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE5);
                  else
                    PARSER.parenthesis_counter--;
                }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 1329 "scanner.l"
{ if(PARSER.parenthesis_counter==0)
                    BEGIN(GCC_ATTRIBUTE2); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 1331 "scanner.l"
{ /* Throw away */ }
	YY_BREAK

// end bit: the closing parenthesis
case 352:
YY_RULE_SETUP
#line 1335 "scanner.l"
{ BEGIN(GRAMMAR); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 1336 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 354:
/* rule 354 can match eol */
YY_RULE_SETUP
#line 1337 "scanner.l"
{ /* Throw away */ }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 1338 "scanner.l"
{ BEGIN(GRAMMAR); loc(); return yyansi_ctext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(COMMENT2):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(ASM_BLOCK):
case YY_STATE_EOF(MSC_ASM):
case YY_STATE_EOF(IGNORE_PARENS):
case YY_STATE_EOF(MSC_PRAGMA):
case YY_STATE_EOF(MSC_ANNOTATION):
case YY_STATE_EOF(GCC_ATTRIBUTE1):
case YY_STATE_EOF(GCC_ATTRIBUTE2):
case YY_STATE_EOF(GCC_ATTRIBUTE3):
case YY_STATE_EOF(GCC_ATTRIBUTE4):
case YY_STATE_EOF(GCC_ATTRIBUTE5):
case YY_STATE_EOF(GCC_ASM):
case YY_STATE_EOF(GCC_ASM_PAREN):
#line 1341 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 1343 "scanner.l"
ECHO;
	YY_BREAK
#line 5488 "ansi_c_lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyansi_cin at a new source and called
			 * yyansi_clex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyansi_cin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yyansi_cwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yyansi_ctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yyansi_clex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyansi_crealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyansi_crestart(yyansi_cin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyansi_crealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 93);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3138 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 93;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3138 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3137);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyansi_crestart(yyansi_cin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yyansi_cwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yyansi_ctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyansi_crestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyansi_censure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yyansi_c_create_buffer(yyansi_cin,YY_BUF_SIZE );
	}

	yyansi_c_init_buffer(YY_CURRENT_BUFFER,input_file );
	yyansi_c_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyansi_c_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yyansi_cpop_buffer_state();
	 *		yyansi_cpush_buffer_state(new_buffer);
     */
	yyansi_censure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yyansi_c_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yyansi_cwrap()) processing, but the only time this flag
	 * is looked at is after yyansi_cwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yyansi_c_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyansi_cin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyansi_c_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyansi_calloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yyansi_c_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yyansi_c_create_buffer()
 * 
 */
    void yyansi_c_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyansi_cfree((void *) b->yy_ch_buf  );

	yyansi_cfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyansi_crestart() or at EOF.
 */
    static void yyansi_c_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yyansi_c_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yyansi_c_init_buffer was _probably_
     * called from yyansi_crestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyansi_c_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yyansi_c_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyansi_cpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyansi_censure_buffer_stack();

	/* This block is copied from yyansi_c_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yyansi_c_switch_to_buffer. */
	yyansi_c_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyansi_cpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yyansi_c_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yyansi_c_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyansi_censure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_calloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyansi_crealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyansi_censure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yyansi_c_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyansi_calloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yyansi_c_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yyansi_clex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yyansi_c_scan_bytes() instead.
 */
YY_BUFFER_STATE yyansi_c_scan_string (yyconst char * yystr )
{
    
	return yyansi_c_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yyansi_clex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yyansi_c_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyansi_calloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yyansi_c_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yyansi_c_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yyansi_c_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yyansi_ctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yyansi_ctext[yyansi_cleng] = (yy_hold_char); \
		(yy_c_buf_p) = yyansi_ctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyansi_cleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyansi_cget_lineno  (void)
{
        
    return yyansi_clineno;
}

/** Get the input stream.
 * 
 */
FILE *yyansi_cget_in  (void)
{
        return yyansi_cin;
}

/** Get the output stream.
 * 
 */
FILE *yyansi_cget_out  (void)
{
        return yyansi_cout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyansi_cget_leng  (void)
{
        return yyansi_cleng;
}

/** Get the current token.
 * 
 */

char *yyansi_cget_text  (void)
{
        return yyansi_ctext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyansi_cset_lineno (int  _line_number )
{
    
    yyansi_clineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yyansi_c_switch_to_buffer
 */
void yyansi_cset_in (FILE *  _in_str )
{
        yyansi_cin = _in_str ;
}

void yyansi_cset_out (FILE *  _out_str )
{
        yyansi_cout = _out_str ;
}

int yyansi_cget_debug  (void)
{
        return yyansi_c_flex_debug;
}

void yyansi_cset_debug (int  _bdebug )
{
        yyansi_c_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yyansi_clex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyansi_cin = stdin;
    yyansi_cout = stdout;
#else
    yyansi_cin = (FILE *) 0;
    yyansi_cout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yyansi_clex_init()
     */
    return 0;
}

/* yyansi_clex_destroy is for both reentrant and non-reentrant scanners. */
int yyansi_clex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yyansi_c_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yyansi_cpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyansi_cfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yyansi_clex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyansi_calloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyansi_crealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyansi_cfree (void * ptr )
{
			free( (char *) ptr );	/* see yyansi_crealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1343 "scanner.l"



int yyansi_cwrap() { return 1; }

